{"title":"Redis使用方法","uid":"24d86df1eb0769a21c43e269a821ebdc","slug":"Redis使用方法","date":"2024-03-24T15:13:16.329Z","updated":"2024-03-24T16:53:40.934Z","comments":true,"path":"api/articles/Redis使用方法.json","keywords":null,"cover":"https://redis.io/","content":"<h1 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h1>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。  Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。\n\n<h1 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt; \n&lt;&#x2F;dependency&gt;\n</code></pre>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  redis:\n    # Redis服务器地址\n    host: 19.1.5.11\n    # Redis服务器端口号\n    port: 6379\n    # 使用的数据库索引，默认是0\n    database: 0\n    # 连接超时时间\n    timeout: 1800000\n     # 设置密码\n    password: &quot;123456&quot;\n    lettuce:\n      pool:\n        # 最大阻塞等待时间，负数表示没有限制\n        max-wait: -1\n        # 连接池中的最大空闲连接\n        max-idle: 5\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池中最大连接数，负数表示没有限制\n        max-active: 20\n</code></pre>\n\n<h2 id=\"序列化防止乱码\"><a href=\"#序列化防止乱码\" class=\"headerlink\" title=\"序列化防止乱码\"></a>序列化防止乱码</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npubtic RedisTemptate&lt;String, Object&gt; redisTemptate(RedisConnectionFactory redisConnectionFactory) &#123; \n   \n    RedisTemptate&lt;String, 0bject&gt; redisTemptate &#x3D; new RedisTempLate&lt;&gt;() ;\n    &#x2F;&#x2F;Redis连接工厂\n    redisTemptate.setConnectionFactory(redisConnectionFactory);\n    redisTemptate . setKeySeriaLizer(new StringRedisSeriaLizer());\n    &#x2F;&#x2F; 役 置 vatue 的 序列 化 策略 \n    redisTemptate.setVatueSeriatizer(new Jackson2JsonRedisSeriatizer&lt;&gt;(0bject.ctass));\n    return redisTemptate;\n&#125;</code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RedisConfig &#123;\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)\n            throws UnknownHostException &#123;\n        &#x2F;&#x2F; 创建模板\n        RedisTemplate&lt;String, Object&gt; redisTemplate &#x3D; new RedisTemplate&lt;&gt;();\n        &#x2F;&#x2F; 设置连接工厂\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        &#x2F;&#x2F; 设置序列化工具\n        GenericJackson2JsonRedisSerializer jsonRedisSerializer &#x3D;\n                new GenericJackson2JsonRedisSerializer();\n        &#x2F;&#x2F; key和 hashKey采用 string序列化\n        redisTemplate.setKeySerializer(RedisSerializer.string());\n        redisTemplate.setHashKeySerializer(RedisSerializer.string());\n        &#x2F;&#x2F; value和 hashValue采用 JSON序列化\n        redisTemplate.setValueSerializer(jsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jsonRedisSerializer);\n        return redisTemplate;\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h2><p><a href=\"https://img-blog.csdnimg.cn/20190412005015660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1c3RyeV9kZW5n,size_16,color_FFFFFF,t_70\">增删改查</a></p>\n<h4 id=\"String-字符串类型\"><a href=\"#String-字符串类型\" class=\"headerlink\" title=\"String-字符串类型\"></a>String-字符串类型</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.tensquare.article;\n\nimport com.tensquare.article.pojo.User;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport java.util.concurrent.TimeUnit;\n\n@SpringBootTest\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class RedisTemTest &#123;\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    &#x2F;*\n     * String类型的数据增删改查\n     * *&#x2F;\n    @Test\n    public void StringDataTest() &#123;\n        &#x2F;&#x2F; 创建User对象 ,要存入String类型的对象,需要实现 Serializable 接口\n        User user &#x3D; new User(&quot;1&quot;, &quot;Tom&quot;, &quot;打棒球&quot;, 15);\n\n        &#x2F;&#x2F; 添加数据\n        redisTemplate.opsForValue().set(&quot;user&quot;, user);\n\n        &#x2F;&#x2F; 添加数据并设置有效时间为30s, (30, TimeUnit.SECONDS) 分别代表数字,计量单位\n        redisTemplate.opsForValue().set(&quot;user1&quot;, &quot;Rose&quot;, 30, TimeUnit.SECONDS);\n\n        &#x2F;&#x2F;查找数据 根据key获取value\n        User value &#x3D; (User) redisTemplate.opsForValue().get(&quot;user&quot;);\n\n        &#x2F;&#x2F;查找数据 长度\n        Long size &#x3D; redisTemplate.opsForValue().size(&quot;user1&quot;);\n\n        &#x2F;&#x2F; 删除数据\n        redisTemplate.delete(&quot;user1&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<h4 id=\"Set-集合类型\"><a href=\"#Set-集合类型\" class=\"headerlink\" title=\"Set-集合类型\"></a>Set-集合类型</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n    * Set 集合类型CURD\n    * *&#x2F;\n   @Test\n   public void SetDataTest() &#123;\n       User user &#x3D; new User(&quot;1&quot;, &quot;Tom&quot;, &quot;打棒球&quot;, 15);\n       User user1 &#x3D; new User(&quot;2&quot;, &quot;Jack&quot;, &quot;打网球&quot;, 17);\n       User user2 &#x3D; new User(&quot;3&quot;, &quot;Rose&quot;, &quot;打篮球&quot;, 18);\n       User user3 &#x3D; new User(&quot;4&quot;, &quot;Jerry&quot;, &quot;踢足球&quot;, 19);\n\n       &#x2F;&#x2F; 添加 key为user_1的user对象\n       redisTemplate.opsForSet().add(&quot;user_1&quot;, user);\n       redisTemplate.opsForSet().add(&quot;user_1&quot;, user1);\n\n\t&#x2F;&#x2F; 定时 设置 user_1 数据的存活时间为5秒 测试时注释\n       redisTemplate.expire(&quot;user_1&quot;, 5, TimeUnit.SECONDS);\n\n       &#x2F;&#x2F; 查询 user_1 集合中的所有 value\n       Set user1_list &#x3D; redisTemplate.opsForSet().members(&quot;user_1&quot;);\n       &#x2F;&#x2F; 查询 user_1 集合中是否有 user 对象\n       Boolean result &#x3D; redisTemplate.opsForSet().isMember(&quot;user_1&quot;, user);\n\n       &#x2F;&#x2F; 删除 user_1 集合中的 user对象 ,并返回移除成功数量\n       Long success_count &#x3D; redisTemplate.opsForSet().remove(&quot;user_1&quot;, user);\n       &#x2F;&#x2F; 删除 user_1 集合中的栈顶元素\n       Object user_1 &#x3D; redisTemplate.opsForSet().pop(&quot;user_1&quot;);\n\n       &#x2F;&#x2F; 测试 交集 并集 差集的数据\n       redisTemplate.opsForSet().add(&quot;names1&quot;, user, user1, user2);\n       redisTemplate.opsForSet().add(&quot;names2&quot;, user, user1, user3);\n       &#x2F;&#x2F;取交集\n       Set&lt;User&gt; intersect &#x3D; redisTemplate.opsForSet().intersect(&quot;names1&quot;, &quot;names2&quot;);\n       for (User u1 : intersect) &#123;\n           System.out.println(&quot;交集: &quot; + u1);\n       &#125;\n       &#x2F;&#x2F;取并集\n       Set&lt;User&gt; union &#x3D; redisTemplate.opsForSet().union(&quot;names1&quot;, &quot;names2&quot;);\n       for (User u2 : union) &#123;\n           System.out.println(&quot;并集: &quot; + u2);\n       &#125;\n       &#x2F;&#x2F;取差集[第一个集合中存在，但第二个集合中不存在的元素]\n       Set&lt;User&gt; difference &#x3D; redisTemplate.opsForSet().difference(&quot;names1&quot;, &quot;names2&quot;);\n       for (User u3 : difference) &#123;\n           System.out.println(&quot;差集: &quot; + u3);\n       &#125;\n   &#125;\n</code></pre>\n\n<h4 id=\"List-链表类型\"><a href=\"#List-链表类型\" class=\"headerlink\" title=\"List-链表类型\"></a>List-链表类型</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n    * List 数据类型的CRUD\n    * *&#x2F;\n   @Test\n   public void ListDataTest() &#123;\n       User user &#x3D; new User(&quot;1&quot;, &quot;Tom&quot;, &quot;打棒球&quot;, 15);\n       User user1 &#x3D; new User(&quot;2&quot;, &quot;Jack&quot;, &quot;打网球&quot;, 17);\n\n       &#x2F;&#x2F;从左边添加一个元素\n       redisTemplate.opsForList().rightPush(&quot;user1&quot;, user);\n       &#x2F;&#x2F;从左边添加多个元素\n       redisTemplate.opsForList().leftPushAll(&quot;user2&quot;, user, user1);\n\n       &#x2F;&#x2F;从右边添加一个元素\n       redisTemplate.opsForList().rightPush(&quot;user3&quot;, user1);\n       &#x2F;&#x2F;从右边添加多个元素\n       redisTemplate.opsForList().rightPushAll(&quot;user4&quot;, user, user1);\n\n\t&#x2F;&#x2F; 定时 设置 user2 数据的存活时间为5秒 测试时注释\n       redisTemplate.expire(&quot;user2&quot;, 5, TimeUnit.SECONDS);\n\n       &#x2F;* 根据key和元素索引进行查询\n        *  0和正数代表从左边开始\n        *  负数代表从右边开始\n        * *&#x2F;\n       &#x2F;&#x2F; 查询 user3 链表中所有的元素\n       List user3 &#x3D; redisTemplate.opsForList().range(&quot;user3&quot;, 0, -1);\n       &#x2F;&#x2F; 查询 user3 链表中第一个元素\n       User data &#x3D; (User) redisTemplate.opsForList().index(&quot;user3&quot;, 0);\n       System.out.println(data);\n\n       &#x2F;&#x2F; 修改 user3 链表中第一个的元素为 user1 对象\n       redisTemplate.opsForList().set(&quot;user3&quot;, 0, user);\n \t  \n \t    &#x2F;&#x2F; 删除链表左侧第二个 user 对象\n       redisTemplate.opsForList().remove(&quot;user3&quot;, 2, user);\n       &#x2F;&#x2F;删除 user3 链表中左侧的第一个元素\n       redisTemplate.opsForList().leftPop(&quot;user3&quot;);\n       &#x2F;&#x2F;删除 user3 链表中右侧的第一个元素\n       redisTemplate.opsForList().rightPop(&quot;user3&quot;);\n   &#125;\n</code></pre>\n\n<h4 id=\"Hash-散列类型\"><a href=\"#Hash-散列类型\" class=\"headerlink\" title=\"Hash-散列类型\"></a>Hash-<a href=\"https://so.csdn.net/so/search?q=%E6%95%A3%E5%88%97&spm=1001.2101.3001.7020\">散列</a>类型</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">  &#x2F;*\n   * Hash集合CRUD\n   * *&#x2F;\n  @Test\n  public void HashDataTest() &#123;\n      User user &#x3D; new User(&quot;1&quot;, &quot;Tom&quot;, &quot;打棒球&quot;, 15);\n      User user1 &#x3D; new User(&quot;2&quot;, &quot;Jack&quot;, &quot;打网球&quot;, 17);\n\n      &#x2F;&#x2F; 添加 user 到 hash集合\n      redisTemplate.opsForHash().put(&quot;hash&quot;, &quot;1&quot;, user);\n      redisTemplate.opsForHash().put(&quot;hash&quot;, &quot;2&quot;, user1);\n\n&#x2F;&#x2F; 定时 设置 hash 的数据存活时间为5秒 测试时注释\n      redisTemplate.expire(&quot;hash&quot;, 5, TimeUnit.SECONDS);\n\n      &#x2F;&#x2F; 查询 hash中hashKey 为1的值\n      User hash &#x3D; (User) redisTemplate.opsForHash().get(&quot;hash&quot;, &quot;1&quot;);\n      &#x2F;&#x2F; 查询 hash中 所有hashKey 对应的的值\n      List&lt;User&gt; userList &#x3D; redisTemplate.opsForHash().values(&quot;hash&quot;);\n      &#x2F;&#x2F; 查询 hash中 所有hashKey 对应的键值对\n      Map&lt;String, User&gt; hashKeyMap &#x3D; redisTemplate.opsForHash().entries(&quot;hash&quot;);\n      &#x2F;&#x2F; 查询 hash中所有的hashKey\n      Set hashKeyList &#x3D; redisTemplate.opsForHash().keys(&quot;hash&quot;);\n      &#x2F;&#x2F; 查询 hash 中 是否有 hashKey 为1\n      Boolean result &#x3D; redisTemplate.opsForHash().hasKey(&quot;hash&quot;, &quot;1&quot;);\n\n      &#x2F;&#x2F; 删除hash 中 HashKey为的1 的值(如需要删除多个,只需要用 &quot;,&quot; 隔开\n      Long removeSize &#x3D; redisTemplate.opsForHash().delete(&quot;hash&quot;, &quot;1&quot;);\n  &#125;\n</code></pre>\n\n<h4 id=\"Zset-有序集合类型\"><a href=\"#Zset-有序集合类型\" class=\"headerlink\" title=\"[Zset]-有序集合类型\"></a>[Zset]-有序集合类型</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n     * zSet集合CRUD\n     * *&#x2F;\n    @Test\n    public void zSetDataTest() &#123;\n        &#x2F;&#x2F; 添加值\n        redisTemplate.opsForZSet().add(&quot;student&quot;, &quot;wangwu&quot;, 60);\n        redisTemplate.opsForZSet().add(&quot;student&quot;, &quot;lishi&quot;, 100);\n        redisTemplate.opsForZSet().add(&quot;student&quot;, &quot;zhangshan&quot;, 90);\n\n\t\t&#x2F;&#x2F; 定时 设置 student 的数据存活时间为5秒 测试时注释\n        redisTemplate.expire(&quot;student&quot;, 5, TimeUnit.SECONDS);\n\n        &#x2F;&#x2F; 增加分数\n        redisTemplate.opsForZSet().incrementScore(&quot;student&quot;, &quot;wangwu&quot;, 30);\n        &#x2F;&#x2F; 减少分数\n        redisTemplate.opsForZSet().incrementScore(&quot;student&quot;, &quot;wangwu&quot;, -50);\n\n        &#x2F;&#x2F;查询 student 下 wangwu 的分数\n        Double score &#x3D; redisTemplate.opsForZSet().score(&quot;student&quot;, &quot;wangwu&quot;);\n        &#x2F;&#x2F;查询 一个元素在集合中的排名  排名从0开始\n        Long rank &#x3D; redisTemplate.opsForZSet().rank(&quot;student&quot;, &quot;zhangshan&quot;);\n        &#x2F;&#x2F; 查询前三个元素\n        Set&lt;String&gt; students &#x3D; redisTemplate.opsForZSet().range(&quot;student&quot;, 0, 2);\n        &#x2F;&#x2F; 查询  前三个元素的键值对\n        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; student &#x3D; redisTemplate.opsForZSet().rangeWithScores(&quot;student&quot;, 0, 2);\n        &#x2F;&#x2F; 查询 根据值的区间查询 key\n        Set&lt;String&gt; students1 &#x3D; redisTemplate.opsForZSet().rangeByScore(&quot;student&quot;, 50, 100);\n        &#x2F;&#x2F; 查询 根据值区间查询 Set集合\n        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; student1 &#x3D; redisTemplate.opsForZSet().rangeByScoreWithScores(&quot;student&quot;, 50, 100);\n        &#x2F;&#x2F;查询 student 中有几个 key\n        Long result &#x3D; redisTemplate.opsForZSet().zCard(&quot;student&quot;);\n\n        &#x2F;&#x2F;根据key-value删除 value允许传入多个\n        redisTemplate.opsForZSet().remove(&quot;student&quot;,&quot;zhangsan&quot;,&quot;lisi&quot;);\n        &#x2F;&#x2F;根据排名区间删除\n        redisTemplate.opsForZSet().removeRange(&quot;student&quot;,0,1);\n        &#x2F;&#x2F;根据分数区间删除\n        redisTemplate.opsForZSet().removeRangeByScore(&quot;student&quot;,70,90);\n    &#125;\n</code></pre>\n\n<h3 id=\"增删改查工具类\"><a href=\"#增删改查工具类\" class=\"headerlink\" title=\"增删改查工具类\"></a>增删改查工具类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lsqingfeng.springboot.utils; \nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n \nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n \n&#x2F;**\n * @className: RedisUtil\n * @description:\n * @author: sh.Liu\n * @date: 2022-03-09 14:07\n *&#x2F;\n@Component\npublic class RedisUtil &#123;\n \n    @Autowired\n    private RedisTemplate redisTemplate;\n    &#x2F;**\n     * 给一个指定的 key 值附加过期时间\n     *\n     * @param key\n     * @param time\n     * @return\n     *&#x2F;\n    public boolean expire(String key, long time) &#123;\n        return redisTemplate.expire(key, time, TimeUnit.SECONDS);\n    &#125;\n    &#x2F;**\n     * 根据key 获取过期时间\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public long getTime(String key) &#123;\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    &#125;\n    &#x2F;**\n     * 根据key 获取过期时间\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public boolean hasKey(String key) &#123;\n        return redisTemplate.hasKey(key);\n    &#125;\n    &#x2F;**\n     * 移除指定key 的过期时间\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public boolean persist(String key) &#123;\n        return redisTemplate.boundValueOps(key).persist();\n    &#125;\n \n    &#x2F;&#x2F;- - - - - - - - - - - - - - - - - - - - -  String类型 - - - - - - - - - - - - - - - - - - - -\n \n    &#x2F;**\n     * 根据key获取值\n     *\n     * @param key 键\n     * @return 值\n     *&#x2F;\n    public Object get(String key) &#123;\n        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);\n    &#125;\n \n    &#x2F;**\n     * 将值放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @return true成功 false 失败\n     *&#x2F;\n    public void set(String key, String value) &#123;\n        redisTemplate.opsForValue().set(key, value);\n    &#125;\n \n    &#x2F;**\n     * 将值放入缓存并设置时间\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) -1为无期限\n     * @return true成功 false 失败\n     *&#x2F;\n    public void set(String key, String value, long time) &#123;\n        if (time &gt; 0) &#123;\n            redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n        &#125; else &#123;\n            redisTemplate.opsForValue().set(key, value);\n        &#125;\n    &#125;\n \n    &#x2F;**\n     * 批量添加 key (重复的键会覆盖)\n     *\n     * @param keyAndValue\n     *&#x2F;\n    public void batchSet(Map&lt;String, String&gt; keyAndValue) &#123;\n        redisTemplate.opsForValue().multiSet(keyAndValue);\n    &#125;\n \n    &#x2F;**\n     * 批量添加 key-value 只有在键不存在时,才添加\n     * map 中只要有一个key存在,则全部不添加\n     *\n     * @param keyAndValue\n     *&#x2F;\n    public void batchSetIfAbsent(Map&lt;String, String&gt; keyAndValue) &#123;\n        redisTemplate.opsForValue().multiSetIfAbsent(keyAndValue);\n    &#125;\n \n    &#x2F;**\n     * 对一个 key-value 的值进行加减操作,\n     * 如果该 key 不存在 将创建一个key 并赋值该 number\n     * 如果 key 存在,但 value 不是长整型 ,将报错\n     *\n     * @param key\n     * @param number\n     *&#x2F;\n    public Long increment(String key, long number) &#123;\n        return redisTemplate.opsForValue().increment(key, number);\n    &#125;\n \n    &#x2F;**\n     * 对一个 key-value 的值进行加减操作,\n     * 如果该 key 不存在 将创建一个key 并赋值该 number\n     * 如果 key 存在,但 value 不是 纯数字 ,将报错\n     *\n     * @param key\n     * @param number\n     *&#x2F;\n    public Double increment(String key, double number) &#123;\n        return redisTemplate.opsForValue().increment(key, number);\n    &#125;\n \n    &#x2F;&#x2F;- - - - - - - - - - - - - - - - - - - - -  set类型 - - - - - - - - - - - - - - - - - - - -\n \n    &#x2F;**\n     * 将数据放入set缓存\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public void sSet(String key, String value) &#123;\n        redisTemplate.opsForSet().add(key, value);\n    &#125;\n \n    &#x2F;**\n     * 获取变量中的值\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public Set&lt;Object&gt; members(String key) &#123;\n        return redisTemplate.opsForSet().members(key);\n    &#125;\n \n    &#x2F;**\n     * 随机获取变量中指定个数的元素\n     *\n     * @param key   键\n     * @param count 值\n     * @return\n     *&#x2F;\n    public void randomMembers(String key, long count) &#123;\n        redisTemplate.opsForSet().randomMembers(key, count);\n    &#125;\n \n    &#x2F;**\n     * 随机获取变量中的元素\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public Object randomMember(String key) &#123;\n        return redisTemplate.opsForSet().randomMember(key);\n    &#125;\n \n    &#x2F;**\n     * 弹出变量中的元素\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public Object pop(String key) &#123;\n        return redisTemplate.opsForSet().pop(&quot;setValue&quot;);\n    &#125;\n \n    &#x2F;**\n     * 获取变量中值的长度\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public long size(String key) &#123;\n        return redisTemplate.opsForSet().size(key);\n    &#125;\n \n    &#x2F;**\n     * 根据value从一个set中查询,是否存在\n     *\n     * @param key   键\n     * @param value 值\n     * @return true 存在 false不存在\n     *&#x2F;\n    public boolean sHasKey(String key, Object value) &#123;\n        return redisTemplate.opsForSet().isMember(key, value);\n    &#125;\n \n    &#x2F;**\n     * 检查给定的元素是否在变量中。\n     *\n     * @param key 键\n     * @param obj 元素对象\n     * @return\n     *&#x2F;\n    public boolean isMember(String key, Object obj) &#123;\n        return redisTemplate.opsForSet().isMember(key, obj);\n    &#125;\n \n    &#x2F;**\n     * 转移变量的元素值到目的变量。\n     *\n     * @param key     键\n     * @param value   元素对象\n     * @param destKey 元素对象\n     * @return\n     *&#x2F;\n    public boolean move(String key, String value, String destKey) &#123;\n        return redisTemplate.opsForSet().move(key, value, destKey);\n    &#125;\n \n    &#x2F;**\n     * 批量移除set缓存中元素\n     *\n     * @param key    键\n     * @param values 值\n     * @return\n     *&#x2F;\n    public void remove(String key, Object... values) &#123;\n        redisTemplate.opsForSet().remove(key, values);\n    &#125;\n \n    &#x2F;**\n     * 通过给定的key求2个set变量的差值\n     *\n     * @param key     键\n     * @param destKey 键\n     * @return\n     *&#x2F;\n    public Set&lt;Set&gt; difference(String key, String destKey) &#123;\n        return redisTemplate.opsForSet().difference(key, destKey);\n    &#125;\n \n \n    &#x2F;&#x2F;- - - - - - - - - - - - - - - - - - - - -  hash类型 - - - - - - - - - - - - - - - - - - - -\n \n    &#x2F;**\n     * 加入缓存\n     *\n     * @param key 键\n     * @param map 键\n     * @return\n     *&#x2F;\n    public void add(String key, Map&lt;String, String&gt; map) &#123;\n        redisTemplate.opsForHash().putAll(key, map);\n    &#125;\n \n    &#x2F;**\n     * 获取 key 下的 所有  hashkey 和 value\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public Map&lt;Object, Object&gt; getHashEntries(String key) &#123;\n        return redisTemplate.opsForHash().entries(key);\n    &#125;\n \n    &#x2F;**\n     * 验证指定 key 下 有没有指定的 hashkey\n     *\n     * @param key\n     * @param hashKey\n     * @return\n     *&#x2F;\n    public boolean hashKey(String key, String hashKey) &#123;\n        return redisTemplate.opsForHash().hasKey(key, hashKey);\n    &#125;\n \n    &#x2F;**\n     * 获取指定key的值string\n     *\n     * @param key  键\n     * @param key2 键\n     * @return\n     *&#x2F;\n    public String getMapString(String key, String key2) &#123;\n        return redisTemplate.opsForHash().get(&quot;map1&quot;, &quot;key1&quot;).toString();\n    &#125;\n \n    &#x2F;**\n     * 获取指定的值Int\n     *\n     * @param key  键\n     * @param key2 键\n     * @return\n     *&#x2F;\n    public Integer getMapInt(String key, String key2) &#123;\n        return (Integer) redisTemplate.opsForHash().get(&quot;map1&quot;, &quot;key1&quot;);\n    &#125;\n \n    &#x2F;**\n     * 弹出元素并删除\n     *\n     * @param key 键\n     * @return\n     *&#x2F;\n    public String popValue(String key) &#123;\n        return redisTemplate.opsForSet().pop(key).toString();\n    &#125;\n \n    &#x2F;**\n     * 删除指定 hash 的 HashKey\n     *\n     * @param key\n     * @param hashKeys\n     * @return 删除成功的 数量\n     *&#x2F;\n    public Long delete(String key, String... hashKeys) &#123;\n        return redisTemplate.opsForHash().delete(key, hashKeys);\n    &#125;\n \n    &#x2F;**\n     * 给指定 hash 的 hashkey 做增减操作\n     *\n     * @param key\n     * @param hashKey\n     * @param number\n     * @return\n     *&#x2F;\n    public Long increment(String key, String hashKey, long number) &#123;\n        return redisTemplate.opsForHash().increment(key, hashKey, number);\n    &#125;\n \n    &#x2F;**\n     * 给指定 hash 的 hashkey 做增减操作\n     *\n     * @param key\n     * @param hashKey\n     * @param number\n     * @return\n     *&#x2F;\n    public Double increment(String key, String hashKey, Double number) &#123;\n        return redisTemplate.opsForHash().increment(key, hashKey, number);\n    &#125;\n \n    &#x2F;**\n     * 获取 key 下的 所有 hashkey 字段\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public Set&lt;Object&gt; hashKeys(String key) &#123;\n        return redisTemplate.opsForHash().keys(key);\n    &#125;\n \n    &#x2F;**\n     * 获取指定 hash 下面的 键值对 数量\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public Long hashSize(String key) &#123;\n        return redisTemplate.opsForHash().size(key);\n    &#125;\n \n    &#x2F;&#x2F;- - - - - - - - - - - - - - - - - - - - -  list类型 - - - - - - - - - - - - - - - - - - - -\n \n    &#x2F;**\n     * 在变量左边添加元素值\n     *\n     * @param key\n     * @param value\n     * @return\n     *&#x2F;\n    public void leftPush(String key, Object value) &#123;\n        redisTemplate.opsForList().leftPush(key, value);\n    &#125;\n \n    &#x2F;**\n     * 获取集合指定位置的值。\n     *\n     * @param key\n     * @param index\n     * @return\n     *&#x2F;\n    public Object index(String key, long index) &#123;\n        return redisTemplate.opsForList().index(&quot;list&quot;, 1);\n    &#125;\n \n    &#x2F;**\n     * 获取指定区间的值。\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     *&#x2F;\n    public List&lt;Object&gt; range(String key, long start, long end) &#123;\n        return redisTemplate.opsForList().range(key, start, end);\n    &#125;\n \n    &#x2F;**\n     * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，\n     * 如果中间参数值存在的话。\n     *\n     * @param key\n     * @param pivot\n     * @param value\n     * @return\n     *&#x2F;\n    public void leftPush(String key, String pivot, String value) &#123;\n        redisTemplate.opsForList().leftPush(key, pivot, value);\n    &#125;\n \n    &#x2F;**\n     * 向左边批量添加参数元素。\n     *\n     * @param key\n     * @param values\n     * @return\n     *&#x2F;\n    public void leftPushAll(String key, String... values) &#123;\n&#x2F;&#x2F;        redisTemplate.opsForList().leftPushAll(key,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;);\n        redisTemplate.opsForList().leftPushAll(key, values);\n    &#125;\n \n    &#x2F;**\n     * 向集合最右边添加元素。\n     *\n     * @param key\n     * @param value\n     * @return\n     *&#x2F;\n    public void leftPushAll(String key, String value) &#123;\n        redisTemplate.opsForList().rightPush(key, value);\n    &#125;\n \n    &#x2F;**\n     * 向左边批量添加参数元素。\n     *\n     * @param key\n     * @param values\n     * @return\n     *&#x2F;\n    public void rightPushAll(String key, String... values) &#123;\n        &#x2F;&#x2F;redisTemplate.opsForList().leftPushAll(key,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;);\n        redisTemplate.opsForList().rightPushAll(key, values);\n    &#125;\n \n    &#x2F;**\n     * 向已存在的集合中添加元素。\n     *\n     * @param key\n     * @param value\n     * @return\n     *&#x2F;\n    public void rightPushIfPresent(String key, Object value) &#123;\n        redisTemplate.opsForList().rightPushIfPresent(key, value);\n    &#125;\n \n    &#x2F;**\n     * 向已存在的集合中添加元素。\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public long listLength(String key) &#123;\n        return redisTemplate.opsForList().size(key);\n    &#125;\n \n    &#x2F;**\n     * 移除集合中的左边第一个元素。\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public void leftPop(String key) &#123;\n        redisTemplate.opsForList().leftPop(key);\n    &#125;\n \n    &#x2F;**\n     * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public void leftPop(String key, long timeout, TimeUnit unit) &#123;\n        redisTemplate.opsForList().leftPop(key, timeout, unit);\n    &#125;\n \n    &#x2F;**\n     * 移除集合中右边的元素。\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public void rightPop(String key) &#123;\n        redisTemplate.opsForList().rightPop(key);\n    &#125;\n \n    &#x2F;**\n     * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。\n     *\n     * @param key\n     * @return\n     *&#x2F;\n    public void rightPop(String key, long timeout, TimeUnit unit) &#123;\n        redisTemplate.opsForList().rightPop(key, timeout, unit);\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p><a href=\"https://img-blog.csdnimg.cn/37bd6dbb88c045ce84deb3fed774b59c.png\">穿透</a></p>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p><a href=\"https://img-blog.csdnimg.cn/9c38ab494d4b4d13930ea14d8f3f0db7.png\">雪崩</a></p>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><p><a href=\"https://img-blog.csdnimg.cn/3d01ccb55bde4a2d96aad731d98f4ef3.png\">击穿</a></p>\n<h2 id=\"主从集群-复制\"><a href=\"#主从集群-复制\" class=\"headerlink\" title=\"主从集群-复制\"></a>主从集群-复制</h2><h2 id=\"哨兵\"><a href=\"#哨兵\" class=\"headerlink\" title=\"哨兵\"></a>哨兵</h2>","text":"Redis是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。...","permalink":"/post/Redis使用方法","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"后端","slug":"后端","count":5,"path":"api/categories/后端.json"}],"tags":[{"name":"后端","slug":"后端","count":3,"path":"api/tags/后端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B%EF%BC%9A\"><span class=\"toc-text\">简介：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#redis\"><span class=\"toc-text\">redis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E9%98%B2%E6%AD%A2%E4%B9%B1%E7%A0%81\"><span class=\"toc-text\">序列化防止乱码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">增删改查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#String-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">String-字符串类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Set-%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Set-集合类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#List-%E9%93%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">List-链表类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Hash-%E6%95%A3%E5%88%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Hash-散列类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Zset-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">[Zset]-有序集合类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%B7%A5%E5%85%B7%E7%B1%BB\"><span class=\"toc-text\">增删改查工具类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">缓存穿透</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9\"><span class=\"toc-text\">缓存雪崩</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF\"><span class=\"toc-text\">缓存击穿</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4-%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">主从集群-复制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%A8%E5%85%B5\"><span class=\"toc-text\">哨兵</span></a></li></ol></li></ol>","author":{"name":"好名字都是狗起的","slug":"好名字都是狗起的","avatar":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg","link":"https://hexo-git-test-3309446352s-projects.vercel.app/","description":"古来圣贤皆寂寞，惟有饮者留其名。","socials":{"github":"https://github.com/3309446352","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"RabbitMQ的使用详解","uid":"d333af1ff0a5ba671c6e4ee22d079a17","slug":"RabbitMQ的使用详解","date":"2024-03-25T13:55:59.000Z","updated":"2024-03-27T15:58:11.278Z","comments":true,"path":"api/articles/RabbitMQ的使用详解.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/y.jpg","text":"RabbitMQ是一个开源的消息代理,它通过消息队列提供了一种异步通信机制...","permalink":"/post/RabbitMQ的使用详解","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"后端","slug":"后端","count":5,"path":"api/categories/后端.json"}],"tags":[{"name":"后端","slug":"后端","count":3,"path":"api/tags/后端.json"},{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"author":{"name":"Jerry","slug":"jerry","avatar":"https://Jerry.png","link":"https://github.com/TriDiamond","description":"I am Jerry, how are you?","socials":{"github":"https://github.com/Jerry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"api","uid":"5487c3ee028ec9c585bb839f341fbee9","slug":"Api接口大全","date":"2024-03-23T12:39:52.637Z","updated":"2024-03-23T13:42:35.405Z","comments":true,"path":"api/articles/Api接口大全.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/00057-3939901662.png","text":"API（Application Programming Interface，应用程序接口）是一些预先定义的函数，或指软件系统不同组成部分衔接的约定。目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问原码，或理解内部工作机制的细节。...","permalink":"/post/Api接口大全","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"好名字都是狗起的","slug":"好名字都是狗起的","avatar":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg","link":"https://hexo-git-test-3309446352s-projects.vercel.app/","description":"古来圣贤皆寂寞，惟有饮者留其名。","socials":{"github":"https://github.com/3309446352","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}