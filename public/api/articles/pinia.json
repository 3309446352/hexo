{"title":"pinia 使用方法详解","uid":"58ca5c850fce7413376e5e7d7321431f","slug":"pinia","date":"2024-03-19T07:34:53.000Z","updated":"2024-03-20T06:24:03.102Z","comments":true,"path":"api/articles/pinia.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/logo.svg","content":"<h2 id=\"一：Pinia简介和五大优势\"><a href=\"#一：Pinia简介和五大优势\" class=\"headerlink\" title=\"一：Pinia简介和五大优势\"></a>一：Pinia简介和五大优势</h2><p>Pinia是vue生态里Vuex的替代者，一个全新的vue状态管理库。在Vue3成为正式版以后，尤雨溪强势推荐的项目就是Pinia。<br>那先来看看Pinia比Vuex好的地方，也就是Pinia的五大优势。</p>\n<ol>\n<li>可以对Vue2和Vue3做到很好的支持，也就是老项目也可以使用Pinia。</li>\n<li>抛弃了Mutations的操作，只有state、getters和actions.极大的简化了状态管理库的使用，让代码编写更加容易直观。</li>\n<li>不需要嵌套模块，符合Vue3的Composition api ，让代码更加扁平化。</li>\n<li>完整的TypeScript支持。Vue3版本的一大优势就是对TypeScript的支持，所以Pinia也做到了完整的支持。如果你对Vuex很熟悉的化，一定知道Vuex对TS的语法支持不是完整的（经常被吐槽）。</li>\n<li>代码更加简洁，可以实现很好的代码自动分割。Vue2的时代，写代码需要来回翻滚屏幕屏幕找变量，非常的麻烦，Vue3的Composition api完美了解决这个问题。 可以实现代码自动分割，pinia也同样继承了这个优点。</li>\n</ol>\n<h2 id=\"二：Pinia开发环境安装\"><a href=\"#二：Pinia开发环境安装\" class=\"headerlink\" title=\"二：Pinia开发环境安装\"></a>二：Pinia开发环境安装</h2><h4 id=\"1-使用Vite就需要先初始化vite：\"><a href=\"#1-使用Vite就需要先初始化vite：\" class=\"headerlink\" title=\"1.使用Vite就需要先初始化vite：\"></a>1.使用Vite就需要先初始化vite：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm init vite@latest\n</code></pre>\n\n<h4 id=\"2-启动项目：\"><a href=\"#2-启动项目：\" class=\"headerlink\" title=\"2.启动项目：\"></a>2.启动项目：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install\nnpm run dev\n</code></pre>\n\n<h4 id=\"3-pinia的安装：\"><a href=\"#3-pinia的安装：\" class=\"headerlink\" title=\"3.pinia的安装：\"></a>3.pinia的安装：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install pinia\n</code></pre>\n\n<h2 id=\"三：用Pinia的方式创建一个store\"><a href=\"#三：用Pinia的方式创建一个store\" class=\"headerlink\" title=\"三：用Pinia的方式创建一个store\"></a>三：用Pinia的方式创建一个store</h2><h4 id=\"1-在main-ts文件里引入Pinia\"><a href=\"#1-在main-ts文件里引入Pinia\" class=\"headerlink\" title=\"1.在main.ts文件里引入Pinia\"></a>1.在main.ts文件里引入Pinia</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createPinia &#125; from &#39;pinia&#39;\n\napp.use(createPinia())</code></pre>\n\n<h4 id=\"2-创建pinia\"><a href=\"#2-创建pinia\" class=\"headerlink\" title=\"2.创建pinia\"></a><strong>2.创建pinia</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123;defineStore&#125; from &#39;pinia&#39;\nconst useAgeStore &#x3D; defineStore(&#39;use&#39;, &#123;\n    state:()&#x3D;&gt;&#123;&#x2F;&#x2F;state 相当于 data 存储变量\n        return &#123;&#125;\n    &#125;,\n    getters: &#123;&#x2F;&#x2F;getters 相当于计算属性 computed\n        getAge: (state) &#x3D;&gt; &#123;\n            return state.age\n        &#125;\n    &#125;,\n    actions: &#123;&#x2F;&#x2F;actions 相当于 methods\n        setAge(age) &#123;\n            this.age &#x3D; age\n        &#125;\n    &#125;\n&#125;) </code></pre>\n\n\n\n<h4 id=\"2-创建store\"><a href=\"#2-创建store\" class=\"headerlink\" title=\"2.创建store\"></a>2.创建store</h4><p>**<u>*store实例相当于一个容器，里面存放的有类似于data，计算属性，方法之类的东西</u>***。通过defineStore()方法定义</p>\n<p>在src下面创建一个store文件夹，再创建与之对应的js文件，比如user.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineStore &#125; from &#39;pinia&#39;\n​\n&#x2F;&#x2F; useStore 可以是 useUser、useCart 之类的任何东西\n&#x2F;&#x2F; 第一个参数是应用程序中 store 的唯一 id\nexport const useUser &#x3D; defineStore(&#39;user&#39;, &#123;\n  &#x2F;&#x2F; other options...\n&#125;)</code></pre>\n\n<p>3.使用store</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script setup&gt;\nimport &#123; useUser &#125; from &#39;@&#x2F;store&#x2F;user.js&#39;\nconst store &#x3D; useUser()\nconsole.log(store)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p> 4.添加state </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; defineStore &#125; from &#39;pinia&#39;\n​\n&#x2F;&#x2F; 第一个参数是应用程序中 store 的唯一 id\n&#x2F;&#x2F; 第二个参数是配置对象\nexport const useUser &#x3D; defineStore(&#39;user&#39;, &#123;\n  &#x2F;&#x2F; state是一个函数，返回一个对象\n  state: () &#x3D;&gt; &#123;\n    return &#123;\n      userName: &#39;jack&#39;,\n      avatar: &#39;https:&#x2F;&#x2F;cloudflare-ipfs.com&#x2F;ipfs&#x2F;Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye&#x2F;avatar&#x2F;363.jpg&#39;\n    &#125;\n  &#125;\n&#125;)</code></pre>\n\n<h2 id=\"1-state\"><a href=\"#1-state\" class=\"headerlink\" title=\"1.state\"></a>1.state</h2><p>1.读取state</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; storeToRefs &#125; from &#39;pinia&#39;\nconst userStore &#x3D; useUser()\n&#x2F;&#x2F; 如果直接解构出数据，这个数据不是响应式的。如果想要变成响应式的，需要调用storeToRefs方法\nconst &#123; userName, avatar &#125; &#x3D; storeToRefs(userStore)</code></pre>\n\n<h4 id=\"1-修改state\"><a href=\"#1-修改state\" class=\"headerlink\" title=\"1.修改state\"></a>1.修改state</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">userStore.userName &#x3D; &#39;张三&#39;</code></pre>\n\n<h4 id=\"2-批量修改state\"><a href=\"#2-批量修改state\" class=\"headerlink\" title=\"2.批量修改state\"></a>2.批量修改state</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 可以用来修改单个属性\nuserStore.$patch(&#123;\n  userName: &#39;张三&#39;\n&#125;)\n    \n&#x2F;&#x2F; 这种回调函数的形式适合修改集合类的数据，比如数组\nuserStore.$patch((state) &#x3D;&gt; &#123;\n  state.avatar &#x3D; &#39;https:&#x2F;&#x2F;cloudflare-ipfs.com&#x2F;ipfs&#x2F;Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye&#x2F;avatar&#x2F;596.jpg&#39;\n&#125;)</code></pre>\n\n<h4 id=\"3-重置state\"><a href=\"#3-重置state\" class=\"headerlink\" title=\"3.重置state\"></a>3.重置state</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 重置\n  userStore.$reset()</code></pre>\n\n<h4 id=\"4-直接替换整个state\"><a href=\"#4-直接替换整个state\" class=\"headerlink\" title=\"4.直接替换整个state\"></a>4.直接替换整个state</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 替换\nuserStore.$state &#x3D; &#123; userName: &#39;rose&#39;, avatar: &#39;https:&#x2F;&#x2F;cloudflare-ipfs.com&#x2F;ipfs&#x2F;Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye&#x2F;avatar&#x2F;854.jpg&#39; &#125;</code></pre>\n\n\n\n<h2 id=\"2-getters\"><a href=\"#2-getters\" class=\"headerlink\" title=\"2.getters\"></a>2.getters</h2><h4 id=\"1-基础使用\"><a href=\"#1-基础使用\" class=\"headerlink\" title=\"1.基础使用\"></a>1.基础使用</h4><p>类似计算属性。推荐里面传递一个形参的写法，不容易出错。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getters: &#123;\n  isAdult: (state) &#x3D;&gt; &#123;\n    return state.age &gt;&#x3D; 18 ? &#39;成年人&#39; : &#39;未成年&#39;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"2-获取\"><a href=\"#2-获取\" class=\"headerlink\" title=\"2.获取\"></a>2.获取</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 直接获取\n&lt;div&gt;&#123;&#123;userStore.isAdult&#125;&#125;&lt;&#x2F;div&gt;</code></pre>\n\n<h4 id=\"3-调用本模块其他getters\"><a href=\"#3-调用本模块其他getters\" class=\"headerlink\" title=\"3. 调用本模块其他getters\"></a>3. 调用本模块其他getters</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getters: &#123;\n  isAdult: (state) &#x3D;&gt; &#123;\n    return state.age &gt;&#x3D; 18 ? &#39;成年人&#39; : &#39;未成年&#39;\n  &#125;,\n  msg: (state) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; msg这个getter访问了自身的getter（isAdult）\n    return state.userName + state.isAdult\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"4-getters传参\"><a href=\"#4-getters传参\" class=\"headerlink\" title=\"4.getters传参\"></a>4.getters传参</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getters: &#123;\n  isAdmin: (state) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 如果getter里面是返回的函数，那么它就可以传参数了\n    return (name) &#x3D;&gt; name &#x3D;&#x3D;&#x3D; &#39;admin&#39; ? &#39;是管理员&#39; : &#39;不是管理员&#39;\n  &#125;\n&#125;</code></pre>\n\n<p> 调用： </p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&#123;&#123;userStore.isAdmin&#125;&#125;</code></pre>\n\n<h2 id=\"3-actions\"><a href=\"#3-actions\" class=\"headerlink\" title=\"3.actions\"></a>3.actions</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">actions: &#123;\n  &#x2F;&#x2F; 这里的方法要写成普通函数，因为里面需要通过this去访问state里面的数据\n  changeNameAsync (newName) &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      &#x2F;&#x2F; actions里面可以访问state\n      this.userName &#x3D; newName\n    &#125;, 1000)\n  &#125;\n&#125;</code></pre>\n\n<p>详情可见官方文档 :  <a href=\"https://pinia.vuejs.org/\">https://pinia.vuejs.org</a></p>\n","text":"一：Pinia简介和五大优势Pinia是vue生态里Vuex的替代者，一个全新的vue状态管理库。在Vue3成为正式版以后，尤雨溪强势推荐的项目就是Pinia。...","permalink":"/post/pinia","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"pinia","slug":"pinia","count":1,"path":"api/tags/pinia.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%EF%BC%9APinia%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BA%94%E5%A4%A7%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">一：Pinia简介和五大优势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%EF%BC%9APinia%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">二：Pinia开发环境安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8Vite%E5%B0%B1%E9%9C%80%E8%A6%81%E5%85%88%E5%88%9D%E5%A7%8B%E5%8C%96vite%EF%BC%9A\"><span class=\"toc-text\">1.使用Vite就需要先初始化vite：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%EF%BC%9A\"><span class=\"toc-text\">2.启动项目：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-pinia%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%9A\"><span class=\"toc-text\">3.pinia的安装：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%EF%BC%9A%E7%94%A8Pinia%E7%9A%84%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAstore\"><span class=\"toc-text\">三：用Pinia的方式创建一个store</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9C%A8main-ts%E6%96%87%E4%BB%B6%E9%87%8C%E5%BC%95%E5%85%A5Pinia\"><span class=\"toc-text\">1.在main.ts文件里引入Pinia</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BApinia\"><span class=\"toc-text\">2.创建pinia</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BAstore\"><span class=\"toc-text\">2.创建store</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-state\"><span class=\"toc-text\">1.state</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%AE%E6%94%B9state\"><span class=\"toc-text\">1.修改state</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9state\"><span class=\"toc-text\">2.批量修改state</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%87%8D%E7%BD%AEstate\"><span class=\"toc-text\">3.重置state</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%9B%B4%E6%8E%A5%E6%9B%BF%E6%8D%A2%E6%95%B4%E4%B8%AAstate\"><span class=\"toc-text\">4.直接替换整个state</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-getters\"><span class=\"toc-text\">2.getters</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.基础使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">2.获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%B0%83%E7%94%A8%E6%9C%AC%E6%A8%A1%E5%9D%97%E5%85%B6%E4%BB%96getters\"><span class=\"toc-text\">3. 调用本模块其他getters</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-getters%E4%BC%A0%E5%8F%82\"><span class=\"toc-text\">4.getters传参</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-actions\"><span class=\"toc-text\">3.actions</span></a></li></ol>","author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Docker使用详解","uid":"7c83d28ccc8a1e7e934244d5ad0947e8","slug":"Docker","date":"2024-03-20T04:07:03.000Z","updated":"2024-03-22T05:30:16.096Z","comments":true,"path":"api/articles/Docker.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/60ba051fae5a9ba4024b9043.webp","text":"本文主要介绍Docker的基本概念、安装、常用命令、镜像、容器、仓库等。...","permalink":"/post/Docker","photos":[],"count_time":{"symbolsCount":284,"symbolsTime":"1 mins."},"categories":[{"name":"运维","slug":"运维","count":2,"path":"api/categories/运维.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}}},"next_post":{"title":"jsoup","uid":"bc74dd499625cf193aec9c466a450488","slug":"jsoup","date":"2024-03-18T16:12:01.000Z","updated":"2024-03-20T06:25:08.957Z","comments":true,"path":"api/articles/jsoup.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/Snipaste_2023-03-27_21-51-18.png?token=ASFPQID2C66R7XCXGYTGM4LF7JJ2U","text":"一、jsoup概述jsoup 是一款基于 Java 的HTML解析器，它提供了一套非常省力的API，不但能直接解析某个URL地址、HTML文本内容，而且还能通过...","permalink":"/post/jsoup","photos":[],"count_time":{"symbolsCount":441,"symbolsTime":"1 mins."},"categories":[{"name":"爬虫","slug":"爬虫","count":2,"path":"api/categories/爬虫.json"}],"tags":[{"name":"-爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}],"author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}}}}