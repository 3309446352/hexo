{"title":"RabbitMQ的使用详解","uid":"d333af1ff0a5ba671c6e4ee22d079a17","slug":"RabbitMQ的使用详解","date":"2024-03-25T13:55:59.000Z","updated":"2024-03-27T15:58:11.278Z","comments":true,"path":"api/articles/RabbitMQ的使用详解.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/y.jpg","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>RabbitMQ的使用详解</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介 :\"></a>简介 :</h2><ul>\n<li>RabbitMQ是一个开源的消息代理,它通过消息队列提供了一种异步通信机制. RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统. 它遵循Mozilla Public License开源协议. RabbitMQ是使用Erlang编写的，并且RabbitMQ是基于AMQP协议的. RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统. RabbitMQ是使用Erlang编写的，并且RabbitMQ是基于AMQP协议的.</li>\n</ul>\n<p>你可以把它想像成一个邮局：你把信件放入邮箱，邮递员就会把信件投递到你的收件人处。在这个比喻中，RabbitMQ是一个邮箱、邮局、邮递员。RabbitMQ和邮局的主要区别是，它处理的不是纸，而是接收、存储和发送二进制的数据——消息。</p>\n<p><img src=\"./RabbitMQ的使用详解/RabbitMQ..png\"> RabbitMQ</p>\n<h2 id=\"springboot依赖配置\"><a href=\"#springboot依赖配置\" class=\"headerlink\" title=\"springboot依赖配置\"></a>springboot依赖配置</h2><pre class=\"line-numbers language-maven\" data-language=\"maven\"><code class=\"language-maven\">&lt;!-- amqp依赖，包含Rabbitmq--&gt;\n&lt;dependency&gt;\n     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n     &lt;artifactId&gt;spring-boot-starter-amqp&lt;&#x2F;artifactId&gt;\n &lt;&#x2F;dependency&gt;</code></pre>\n\n<h2 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  application:\n    name: rabbitmq\n  rabbitmq:\n    host: 127.0.0.1\n    port: 5672\n    username: guest\n    password: guest\n    virtual-host: &#x2F;\n</code></pre>\n\n<h4 id=\"再开始实战之前，我们在介绍一下RabbitMQ-主要的消息模式！RabbitMQ-支持多种消息模型，以下是其中五种常见的消息模型，功能设计我们也将围绕如下五种进行开展\"><a href=\"#再开始实战之前，我们在介绍一下RabbitMQ-主要的消息模式！RabbitMQ-支持多种消息模型，以下是其中五种常见的消息模型，功能设计我们也将围绕如下五种进行开展\" class=\"headerlink\" title=\"再开始实战之前，我们在介绍一下RabbitMQ 主要的消息模式！RabbitMQ 支持多种消息模型，以下是其中五种常见的消息模型，功能设计我们也将围绕如下五种进行开展\"></a>再开始实战之前，我们在介绍一下RabbitMQ 主要的消息模式！RabbitMQ 支持多种消息模型，以下是其中五种常见的消息模型，功能设计我们也将围绕如下五种进行开展</h4><ul>\n<li><p>简单模式（Simple Mode生产者消费者模式）：<br>在简单模式中，一个生产者将消息发送到一个队列，然后一个消费者从该队列接收并处理消息。这是最基本的消息模型，适用于简单的应用场景。</p>\n</li>\n<li><p>工作队列模式（Work Queue Mode 广播模式）：<br>工作队列模式也被称为任务队列模式。多个消费者共享一个队列，并通过轮询的方式接收消息。每个消息只会被一个消费者处理。适用于分布式任务的情况。</p>\n</li>\n<li><p>发布&#x2F;订阅模式（Publish&#x2F;Subscribe Mode）：<br>在发布&#x2F;订阅模式中，一个生产者将消息发送到交换机（Exchange），而不是直接发送到队列。然后，绑定到该交换机的多个队列都会收到消息。适用于广播类型的消息发送。</p>\n</li>\n<li><p>路由模式（Routing Mode）：<br>路由模式中，消息根据路由键（Routing Key）的匹配规则被发送到特定的队列。生产者将消息发送到交换机，并指定一个路由键，在消费者端，队列通过绑定键（Binding Key）与交换机进行绑定。适用于根据条件筛选消息的情况。</p>\n</li>\n<li><p>主题模式（Topic Mode）：<br>主题模式是路由模式的扩展，它支持使用通配符进行更灵活的匹配。通过使用特定的通配符匹配规则，可以实现灵活而强大的消息路由策略。适用于订阅特定主题的场景。</p>\n</li>\n</ul>\n<p>以上是 RabbitMQ 的五种常见消息模型，每种模型都有其适用的场景和特点。您可以根据具体需求选择合适的消息模型来构建应用程序。</p>\n<h2 id=\"1、简单模式（Simple-Mode生产者消费者模式）：-Hello-World简单模型\"><a href=\"#1、简单模式（Simple-Mode生产者消费者模式）：-Hello-World简单模型\" class=\"headerlink\" title=\"1、简单模式（Simple Mode生产者消费者模式）： Hello World简单模型\"></a>1、简单模式（Simple Mode生产者消费者模式）： Hello World简单模型</h2><h3 id=\"配置类\"><a href=\"#配置类\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n&#x2F;**\n * @Description MQ配置类\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Configuration\npublic class RabbitMQConfig &#123;\n    &#x2F;**\n     * @return &#123;@link Queue &#125;\n     * @Description 设置队列\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @Bean\n    public Queue queue()&#123;\n        return new Queue(&quot;simple.hello&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 生产者（发送消息）\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\n\npublic class MessageSender &#123;\n    @Autowired\n\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 发送消息\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    public void sendMessage(String message) &#123;\n        System.out.println(&quot;发送祝福：&quot; + message);\n        rabbitTemplate.convertAndSend(&quot;simple.hello&quot;, message);\n\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 消息接收器\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\npublic class MessageReceiver &#123;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 处理消息\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @RabbitListener(queues &#x3D; &quot;simple.hello&quot;)\n    public void handleMessage(String message) &#123;\n        System.out.println(&quot;我收到了你的祝福: &quot; + message);\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import com.xiaohui.service.MessageSender;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class MQTestDemo &#123;\n    @Autowired\n    private MessageSender messageSender;\n    @Test\n    public void testDemo1()&#123;\n            messageSender.sendMessage(&quot;我想跟你说：希望你开心快乐！！！&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-工作队列模式（Work-Queue-Mode-广播模式）-Work-queues一对多作队列-也称为Task-Queues或Background-Tasks，\"><a href=\"#2-工作队列模式（Work-Queue-Mode-广播模式）-Work-queues一对多作队列-也称为Task-Queues或Background-Tasks，\" class=\"headerlink\" title=\"2.工作队列模式（Work Queue Mode 广播模式）:Work queues一对多作队列 也称为Task Queues或Background Tasks，\"></a>2.工作队列模式（Work Queue Mode 广播模式）:Work queues一对多作队列 也称为Task Queues或Background Tasks，</h2><h3 id=\"配置类-1\"><a href=\"#配置类-1\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n&#x2F;**\n * @Description MQ配置类\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Configuration\npublic class RabbitMQConfig &#123;\n    &#x2F;&#x2F;队列1\n    private static final String QUEUE01 &#x3D; &quot;queue01&quot;;\n    &#x2F;&#x2F;队列2\n    private static final String QUEUE02 &#x3D; &quot;queue02&quot;;\n    &#x2F;&#x2F;交换机\n    private static final String EXCHANGE_NAME &#x3D; &quot;fanout_exchange&quot;;\n\n    @Bean\n    public Queue queue1() &#123;\n        return new Queue(QUEUE01);\n    &#125;\n\n    @Bean\n    public Queue queue2() &#123;\n        return new Queue(QUEUE02);\n    &#125;\n\n    @Bean\n    public FanoutExchange fanoutExchange() &#123;\n        return new FanoutExchange(EXCHANGE_NAME);\n    &#125;\n\n    @Bean\n    public Binding binding01() &#123;\n        return BindingBuilder.bind(queue1()).to(fanoutExchange());\n    &#125;\n\n    @Bean\n    public Binding binding02() &#123;\n        return BindingBuilder.bind(queue2()).to(fanoutExchange());\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"生产者-1\"><a href=\"#生产者-1\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 生产者（发送消息）\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\n\npublic class MessageSender &#123;\n    @Autowired\n\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 发送消息\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    public void sendMessage(String message) &#123;\n        System.out.println( message);\n        rabbitTemplate.convertAndSend(&quot;fanout_exchange&quot;,&quot;&quot;, message);\n\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"消费者-1\"><a href=\"#消费者-1\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 消息接收器\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\npublic class MessageReceiver &#123;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 消费者01\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @RabbitListener(queues &#x3D; &quot;queue01&quot;)\n    public void receiver01(String message) &#123;\n        System.out.println(&quot;队列01：奔赴山海，&quot; + message);\n    &#125;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 消费者012\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @RabbitListener(queues &#x3D; &quot;queue02&quot;)\n    public void receiver02(String message) &#123;\n        System.out.println(&quot;队列02：向阳而生，&quot; + message);\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"测试类-1\"><a href=\"#测试类-1\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@SpringBootTest\npublic class MQTestDemo &#123;\n    @Autowired\n    private MessageSender messageSender;\n    @Test\n    public void testDemo1()&#123;\n            messageSender.sendMessage(&quot;相信梦想。。。。。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-发布-订阅模式（Publish-Subscribe-Mode）：\"><a href=\"#3-发布-订阅模式（Publish-Subscribe-Mode）：\" class=\"headerlink\" title=\"3.发布&#x2F;订阅模式（Publish&#x2F;Subscribe Mode）：\"></a>3.发布&#x2F;订阅模式（Publish&#x2F;Subscribe Mode）：</h2><h3 id=\"配置类-2\"><a href=\"#配置类-2\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n&#x2F;**\n * @Description MQ配置类\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Configuration\npublic class RabbitmqConfig &#123;\n    &#x2F;&#x2F;队列01\n    private static final String QUEUE01&#x3D; &quot;queue01&quot;;\n    &#x2F;&#x2F;队列02\n    private static final String QUEUE02&#x3D; &quot;queue02&quot;;\n    &#x2F;&#x2F;交换机\n    private static final String EXCHANGE_NAME &#x3D; &quot;direct_exchange&quot;;\n    &#x2F;&#x2F;路由键01\n    private static final String ROUTINGKEY01 &#x3D; &quot;queue_route01&quot;;\n    &#x2F;&#x2F;路由键02\n    private static final String ROUTINGKEY02 &#x3D; &quot;queue_route02&quot;;\n\n    @Bean\n    public Queue queue01()&#123;\n        return new Queue(QUEUE01);\n    &#125;\n    @Bean\n    public Queue queue02()&#123;\n        return new Queue(QUEUE02);\n    &#125;\n    @Bean\n    public DirectExchange directExchange()&#123;\n        return new DirectExchange(EXCHANGE_NAME);\n    &#125;\n\n    @Bean\n    public Binding binding1()&#123;\n        &#x2F;&#x2F;将列队01绑定到交换机上为给他设置路由键\n        return BindingBuilder.bind(queue01()).to(directExchange()).with(ROUTINGKEY01);\n    &#125;\n    @Bean\n    public Binding binding2()&#123;\n        &#x2F;&#x2F;将列队02绑定到交换机上为给他设置路由键\n        return BindingBuilder.bind(queue02()).to(directExchange()).with(ROUTINGKEY02);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"生产者-2\"><a href=\"#生产者-2\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 生产者（发送消息）\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\n\npublic class MessageSender &#123;\n    @Autowired\n\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 发送消息\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    public void sendMessage(String message) &#123;\n        System.out.println( message);\n        rabbitTemplate.convertAndSend(&quot;direct_exchange&quot;,&quot;queue_route01&quot;, message);\n\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"消费者-2\"><a href=\"#消费者-2\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n&#x2F;**\n * @Description 消息接收器\n * @Author IT小辉同学\n * @Date 2023&#x2F;06&#x2F;16\n *&#x2F;\n@Service\npublic class MessageReceiver &#123;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 消费者01\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @RabbitListener(queues &#x3D; &quot;queue01&quot;)\n    public void receiver01(String message) &#123;\n        System.out.println(&quot;队列01——路由01：奔赴山海，&quot; + message);\n    &#125;\n\n    &#x2F;**\n     * @param message 消息\n     * @Description 消费者012\n     * @Author IT小辉同学\n     * @Date 2023&#x2F;06&#x2F;16\n     *&#x2F;\n    @RabbitListener(queues &#x3D; &quot;queue02&quot;)\n    public void receiver02(String message) &#123;\n        System.out.println(&quot;队列02——路由02：向阳而生，&quot; + message);\n    &#125;\n\n&#125;\n\n\n</code></pre>\n<h3 id=\"测试类-2\"><a href=\"#测试类-2\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import com.xiaohui.service.MessageSender;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class MQTestDemo &#123;\n    @Autowired\n    private MessageSender messageSender;\n    @Test\n    public void testDemo1()&#123;\n            messageSender.sendMessage(&quot;相信梦想。。。。。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"4-路由模式（Routing-Mode）：\"><a href=\"#4-路由模式（Routing-Mode）：\" class=\"headerlink\" title=\"4.路由模式（Routing Mode）：\"></a>4.路由模式（Routing Mode）：</h2><h3 id=\"配置类-3\"><a href=\"#配置类-3\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Configuration\npublic class RabbitConfig &#123;\n\n    public static final String EXCHANGE_NAME &#x3D; &quot;direct_exchange&quot;;\n\n    public static final String QUEUE_NAME_1 &#x3D; &quot;queue_1&quot;;\n    public static final String QUEUE_NAME_2 &#x3D; &quot;queue_2&quot;;\n\n    public static final String ROUTING_KEY_1 &#x3D; &quot;key_1&quot;;\n    public static final String ROUTING_KEY_2 &#x3D; &quot;key_2&quot;;\n\n    @Bean\n    public DirectExchange directExchange() &#123;\n        return new DirectExchange(EXCHANGE_NAME);\n    &#125;\n\n    @Bean\n    public Queue queue1() &#123;\n        return new Queue(QUEUE_NAME_1);\n    &#125;\n\n    @Bean\n    public Queue queue2() &#123;\n        return new Queue(QUEUE_NAME_2);\n    &#125;\n\n    @Bean\n    public Binding binding1() &#123;\n        return BindingBuilder.bind(queue1()).to(directExchange()).with(ROUTING_KEY_1);\n    &#125;\n\n    @Bean\n    public Binding binding2() &#123;\n        return BindingBuilder.bind(queue2()).to(directExchange()).with(ROUTING_KEY_2);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"生产者-3\"><a href=\"#生产者-3\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class MessageProducer &#123;\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public void send(String message, String routingKey) &#123;\n        amqpTemplate.convertAndSend(RabbitConfig.EXCHANGE_NAME, routingKey, message);\n        System.out.println(&quot;Sent message: &quot; + message + &quot;, routing key: &quot; + routingKey);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"消费者-3\"><a href=\"#消费者-3\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class MessageConsumer &#123;\n\n    @RabbitListener(queues &#x3D; RabbitConfig.QUEUE_NAME_1)\n    public void receiveFromQueue1(String message) &#123;\n        System.out.println(&quot;Received message from queue 1: &quot; + message);\n    &#125;\n\n    @RabbitListener(queues &#x3D; RabbitConfig.QUEUE_NAME_2)\n    public void receiveFromQueue2(String message) &#123;\n        System.out.println(&quot;Received message from queue 2: &quot; + message);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"测试类-3\"><a href=\"#测试类-3\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class TestService &#123;\n\n    @Autowired\n    private MessageProducer producer;\n\n    @PostConstruct\n    public void test() &#123;\n        producer.send(&quot;hello, queue 1&quot;, RabbitConfig.ROUTING_KEY_1);\n        producer.send(&quot;hello, queue 2&quot;, RabbitConfig.ROUTING_KEY_2);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"5-主题模式（Topic-Mode）：\"><a href=\"#5-主题模式（Topic-Mode）：\" class=\"headerlink\" title=\"5.主题模式（Topic Mode）：\"></a>5.主题模式（Topic Mode）：</h2><h3 id=\"配置类-4\"><a href=\"#配置类-4\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Configuration\npublic class RabbitConfig &#123;\n\n    public static final String EXCHANGE_NAME &#x3D; &quot;topic_exchange&quot;;\n\n    public static final String QUEUE_NAME_1 &#x3D; &quot;queue_1&quot;;\n    public static final String QUEUE_NAME_2 &#x3D; &quot;queue_2&quot;;\n    public static final String QUEUE_NAME_3 &#x3D; &quot;queue_3&quot;;\n\n    public static final String ROUTING_KEY_1 &#x3D; &quot;key_1.*&quot;;\n    public static final String ROUTING_KEY_2 &#x3D; &quot;key_2.*&quot;;\n    public static final String ROUTING_KEY_3 &#x3D; &quot;*.key_3&quot;;\n\n    @Bean\n    public TopicExchange topicExchange() &#123;\n        return new TopicExchange(EXCHANGE_NAME);\n    &#125;\n\n    @Bean\n    public Queue queue1() &#123;\n        return new Queue(QUEUE_NAME_1);\n    &#125;\n\n    @Bean\n    public Queue queue2() &#123;\n        return new Queue(QUEUE_NAME_2);\n    &#125;\n\n    @Bean\n    public Queue queue3() &#123;\n        return new Queue(QUEUE_NAME_3);\n    &#125;\n\n    @Bean\n    public Binding binding1() &#123;\n        return BindingBuilder.bind(queue1()).to(topicExchange()).with(ROUTING_KEY_1);\n    &#125;\n\n    @Bean\n    public Binding binding2() &#123;\n        return BindingBuilder.bind(queue2()).to(topicExchange()).with(ROUTING_KEY_2);\n    &#125;\n\n    @Bean\n    public Binding binding3() &#123;\n        return BindingBuilder.bind(queue3()).to(topicExchange()).with(ROUTING_KEY_3);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"生产者-4\"><a href=\"#生产者-4\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class MessageProducer &#123;\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public void send(String message, String routingKey) &#123;\n        amqpTemplate.convertAndSend(RabbitConfig.EXCHANGE_NAME, routingKey, message);\n        System.out.println(&quot;Sent message: &quot; + message + &quot;, routing key: &quot; + routingKey);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"消费者-4\"><a href=\"#消费者-4\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class MessageConsumer &#123;\n\n    @RabbitListener(queues &#x3D; RabbitConfig.QUEUE_NAME_1)\n    public void receiveFromQueue1(String message) &#123;\n        System.out.println(&quot;Received message from queue 1: &quot; + message);\n    &#125;\n\n    @RabbitListener(queues &#x3D; RabbitConfig.QUEUE_NAME_2)\n    public void receiveFromQueue2(String message) &#123;\n        System.out.println(&quot;Received message from queue 2: &quot; + message);\n    &#125;\n\n    @RabbitListener(queues &#x3D; RabbitConfig.QUEUE_NAME_3)\n    public void receiveFromQueue3(String message) &#123;\n        System.out.println(&quot;Received message from queue 3: &quot; + message);\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"测试类-4\"><a href=\"#测试类-4\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Service\npublic class TestService &#123;\n\n    @Autowired\n    private MessageProducer producer;\n\n    @PostConstruct\n    public void test() &#123;\n        producer.send(&quot;hello, queue 1&quot;, RabbitConfig.ROUTING_KEY_1);\n        producer.send(&quot;hello, queue 2&quot;, RabbitConfig.ROUTING_KEY_2);\n        producer.send(&quot;hello, queue 3&quot;, RabbitConfig.ROUTING_KEY_3);\n    &#125;\n&#125;</code></pre>","text":"RabbitMQ是一个开源的消息代理,它通过消息队列提供了一种异步通信机制...","permalink":"/post/RabbitMQ的使用详解","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"后端","slug":"后端","count":5,"path":"api/categories/后端.json"}],"tags":[{"name":"后端","slug":"后端","count":3,"path":"api/tags/后端.json"},{"name":"RabbitMQ","slug":"RabbitMQ","count":1,"path":"api/tags/RabbitMQ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">RabbitMQ的使用详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介 :</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#springboot%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">springboot依赖配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yaml\"><span class=\"toc-text\">yaml</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%8D%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%88%98%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BRabbitMQ-%E4%B8%BB%E8%A6%81%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F%EF%BC%81RabbitMQ-%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B%EF%BC%8C%E4%BB%A5%E4%B8%8B%E6%98%AF%E5%85%B6%E4%B8%AD%E4%BA%94%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E6%88%91%E4%BB%AC%E4%B9%9F%E5%B0%86%E5%9B%B4%E7%BB%95%E5%A6%82%E4%B8%8B%E4%BA%94%E7%A7%8D%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%B1%95\"><span class=\"toc-text\">再开始实战之前，我们在介绍一下RabbitMQ 主要的消息模式！RabbitMQ 支持多种消息模型，以下是其中五种常见的消息模型，功能设计我们也将围绕如下五种进行开展</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F%EF%BC%88Simple-Mode%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%9A-Hello-World%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1、简单模式（Simple Mode生产者消费者模式）： Hello World简单模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85\"><span class=\"toc-text\">生产者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">消费者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB\"><span class=\"toc-text\">测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97%E6%A8%A1%E5%BC%8F%EF%BC%88Work-Queue-Mode-%E5%B9%BF%E6%92%AD%E6%A8%A1%E5%BC%8F%EF%BC%89-Work-queues%E4%B8%80%E5%AF%B9%E5%A4%9A%E4%BD%9C%E9%98%9F%E5%88%97-%E4%B9%9F%E7%A7%B0%E4%B8%BATask-Queues%E6%88%96Background-Tasks%EF%BC%8C\"><span class=\"toc-text\">2.工作队列模式（Work Queue Mode 广播模式）:Work queues一对多作队列 也称为Task Queues或Background Tasks，</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%B1%BB-1\"><span class=\"toc-text\">配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-1\"><span class=\"toc-text\">生产者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85-1\"><span class=\"toc-text\">消费者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB-1\"><span class=\"toc-text\">测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%88Publish-Subscribe-Mode%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">3.发布&#x2F;订阅模式（Publish&#x2F;Subscribe Mode）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%B1%BB-2\"><span class=\"toc-text\">配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-2\"><span class=\"toc-text\">生产者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85-2\"><span class=\"toc-text\">消费者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB-2\"><span class=\"toc-text\">测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%EF%BC%88Routing-Mode%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">4.路由模式（Routing Mode）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%B1%BB-3\"><span class=\"toc-text\">配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-3\"><span class=\"toc-text\">生产者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85-3\"><span class=\"toc-text\">消费者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB-3\"><span class=\"toc-text\">测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%BC%8F%EF%BC%88Topic-Mode%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">5.主题模式（Topic Mode）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%B1%BB-4\"><span class=\"toc-text\">配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-4\"><span class=\"toc-text\">生产者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E8%B4%B9%E8%80%85-4\"><span class=\"toc-text\">消费者</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB-4\"><span class=\"toc-text\">测试类</span></a></li></ol></li></ol></li></ol>","author":{"name":"Jerry","slug":"jerry","avatar":"https://Jerry.png","link":"https://github.com/TriDiamond","description":"I am Jerry, how are you?","socials":{"github":"https://github.com/Jerry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"python爬虫","uid":"1f6f85799d0fb9cff42528919ed6140f","slug":"python爬虫","date":"2024-03-25T16:11:09.000Z","updated":"2024-03-25T16:12:48.824Z","comments":true,"path":"api/articles/python爬虫.json","keywords":null,"cover":null,"text":"爬虫是一种自动获取网页信息的程序，爬虫程序模拟人的浏览行为，自动访问互联网上的网页，获取网页内容。爬虫程序可以自动获取网页内容，提取感兴趣的信息，存储到本地或者数据库中。...","permalink":"/post/python爬虫","photos":[],"count_time":{"symbolsCount":106,"symbolsTime":"1 mins."},"categories":[{"name":"爬虫","slug":"爬虫","count":2,"path":"api/categories/爬虫.json"}],"tags":[{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}],"author":{"name":"好名字都是狗起的","slug":"好名字都是狗起的","avatar":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg","link":"https://hexo-git-test-3309446352s-projects.vercel.app/","description":"古来圣贤皆寂寞，惟有饮者留其名。","socials":{"github":"https://github.com/3309446352","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Redis使用方法","uid":"24d86df1eb0769a21c43e269a821ebdc","slug":"Redis使用方法","date":"2024-03-24T15:13:16.329Z","updated":"2024-03-24T16:53:40.934Z","comments":true,"path":"api/articles/Redis使用方法.json","keywords":null,"cover":"https://redis.io/","text":"Redis是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。...","permalink":"/post/Redis使用方法","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"后端","slug":"后端","count":5,"path":"api/categories/后端.json"}],"tags":[{"name":"后端","slug":"后端","count":3,"path":"api/tags/后端.json"}],"author":{"name":"好名字都是狗起的","slug":"好名字都是狗起的","avatar":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg","link":"https://hexo-git-test-3309446352s-projects.vercel.app/","description":"古来圣贤皆寂寞，惟有饮者留其名。","socials":{"github":"https://github.com/3309446352","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}