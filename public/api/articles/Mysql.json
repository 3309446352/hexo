{"title":"Mysql","uid":"7f77c660cadf02b64dd36120e903f5f0","slug":"Mysql","date":"2024-03-18T13:22:27.000Z","updated":"2024-03-20T06:24:41.115Z","comments":true,"path":"api/articles/Mysql.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/Snipaste_2023-03-27_21-42-14.png","content":"<h1 id=\"1Mysql\"><a href=\"#1Mysql\" class=\"headerlink\" title=\"1Mysql\"></a>1Mysql</h1><h2 id=\"1-、数据库的三范式是什么\"><a href=\"#1-、数据库的三范式是什么\" class=\"headerlink\" title=\"1****、数据库的三范式是什么\"></a><strong>1****、数据库的三范式是什么</strong></h2><p>第一范式：列不可再分 <strong>原子性</strong></p>\n<p>第二范式：行可以唯一区分，主键约束** 唯一性**</p>\n<p>第三范式：表的非主属性不能依赖与其他表的非主属性 外键约束 <strong>独立性</strong></p>\n<p>且三大范式是一级一级依赖的，第二范式建立在第一范式上，第三范式建立第一第二范式上。</p>\n<h2 id=\"18-事务的四大特性-ACID\"><a href=\"#18-事务的四大特性-ACID\" class=\"headerlink\" title=\"18.事务的四大特性(ACID)\"></a>18.事务的四大特性(ACID)</h2><p>原子性(Atomicity)： 要么全部成功要么全部失败。<br>一致性(Consistency)： 事务执行前和事务执行后，原本和数据库一致的数据仍然一致。<br>隔离性(Isolation)： 事务与事务之间互不干扰。<br>持久性(Durability)： 事务一旦被提交了，那么对数据库中的数据的改变就是永久的。</p>\n<h2 id=\"12-为什么使用B-树不用B树\"><a href=\"#12-为什么使用B-树不用B树\" class=\"headerlink\" title=\"12.为什么使用B+树不用B树\"></a>12.为什么使用B+树不用B树</h2><p>①B树只适合随机检索，而B+树同时支持随机检索和顺序检索(因为叶子节点相当于链表，保存索引值都是有序的)。<br>顺序检索： 按照序列顺序遍历比较找到给定值。<br>随机检索： 不断从序列中随机抽取数据进行比较，最终找到结果。</p>\n<p>②减少了磁盘IO，提高空间利用率： 因为B+树非叶子节点不会存放数据，只有索引值，所以非叶子节点可以保存更多的索引值，这样B+树就可以更矮，减少IO次数。</p>\n<p>③B+树适合范围查找： 这才是关键，因为数据库大部分都是范围查找，B+树的叶子节点是有序链表，直接遍历就行，而B树的范围查找可能两个节点距离很远，只能通过中序遍历去查找，所以使用B+树更合适。<br>中序遍历： (根在中，从左往右，一棵树的左子树永远在根前面，根永远在右子树前面）</p>\n<h2 id=\"21-怎么优化数据库\"><a href=\"#21-怎么优化数据库\" class=\"headerlink\" title=\"21.怎么优化数据库\"></a>21.怎么优化数据库</h2><p>①SQL优化<br>②加缓存<br>③分表<br>④读写分离</p>\n<h2 id=\"22-SQL优化\"><a href=\"#22-SQL优化\" class=\"headerlink\" title=\"22.SQL优化\"></a>22.SQL优化</h2><p>①不要用select *，要使用具体字段。<br>②使用数值代替字符串，比如：0&#x3D;唱，1&#x3D;跳，2&#x3D;rap。<br>③避免返回大量数据，采用分页最好。<br>④使用索引，提升查询速度，不宜建太多索引，不能建在重复数据比较多的字段上。<br>⑤批量插入比单条插入要快，因为事务只需要开启一次，数据量太小体现不了。<br>⑥避免子查询，优化为多表连接查询。<br>⑦尽量使用union all替代union，因为union会自动去重。</p>\n<h2 id=\"2-、数据库引擎有哪些\"><a href=\"#2-、数据库引擎有哪些\" class=\"headerlink\" title=\"2****、数据库引擎有哪些\"></a><strong>2****、数据库引擎有哪些</strong></h2><p>如何查看mysql提供的所有存储引擎</p>\n<p><code>mysql&gt; show engines;</code></p>\n<p>mysql常用引擎包括：MYISAM、Innodb、Memory、MERGE</p>\n<ul>\n<li>MYISAM：全表锁，拥有较高的执行速度，不支持事务，不支持外键，并发性能差，占用空间相对</li>\n<li>较小，对事务完整性没有要求，以select、insert为主的应用基本上可以使用这引擎</li>\n<li>Innodb:行级锁，提供了具有提交、回滚和崩溃回复能力的事务安全，支持自动增长列，支持外键</li>\n<li>约束，并发能力强，占用空间是MYISAM的2.5倍，处理效率相对会差一些</li>\n<li>Memory:全表锁，存储在内容中，速度快，但会占用和数据量成正比的内存空间且数据在mysql重</li>\n<li>启时会丢失，默认使用HASH索引，检索效率非常高，但不适用于精确查找，主要用于那些内容变</li>\n<li>化不频繁的代码表</li>\n<li>MERGE：是一组MYISAM表的组合</li>\n</ul>\n<h2 id=\"3、InnoDB与MyISAM-的区别\"><a href=\"#3、InnoDB与MyISAM-的区别\" class=\"headerlink\" title=\"*3、InnoDB与MyISAM***的区别\"></a>*<em>3</em><em><strong>、</strong></em><em>InnoDB</em><em><strong>与</strong></em><em>MyISAM</em>***的区别</h2><ol>\n<li>InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，</li>\n</ol>\n<p>这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</p>\n<ol start=\"2\">\n<li>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；</li>\n<li>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但</li>\n</ol>\n<p>是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，</p>\n<p>因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的</p>\n<p>是数据文件的指针。主键索引和辅助索引是独立的。</p>\n<ol start=\"4\">\n<li>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一</li>\n</ol>\n<p>个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</p>\n<ol start=\"5\">\n<li>Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高；</li>\n</ol>\n<p>mysql&gt; show engines;<strong>如何选择引擎？</strong></p>\n<p>如果没有特别的需求，使用默认的 Innodb 即可。</p>\n<p>MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p>\n<p>Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键。比如</p>\n<p>OA自动化办公系统。</p>\n<p><strong>4****、数据库的事务</strong></p>\n<h2 id=\"4-、数据库的事务\"><a href=\"#4-、数据库的事务\" class=\"headerlink\" title=\"4**、数据库的事务\"></a>4**<strong>、数据库的事务</strong></h2><p><strong>什么是事务？</strong></p>\n<p><strong>：</strong> 多条sql语句，要么全部成功，要么全部失败。</p>\n<p><strong>事务的特性：</strong></p>\n<p><strong>数据库事务特性：原子性</strong>**(Atomic)<strong><strong>、一致性</strong></strong>(Consistency)<strong><strong>、隔离性</strong></strong>(Isolation)<strong><strong>、持久性</strong></strong>(Durabiliy)**<strong>。</strong></p>\n<p><strong>简称<strong><strong>ACID</strong></strong>。</strong></p>\n<p>原子性：组成一个事务的多个数据库操作是一个不可分割的原子单元，只有所有操作都成功，整个</p>\n<p>事务才会提交。任何一个操作失败，已经执行的任何操作都必须撤销，让数据库返回初始状态。</p>\n<p>一致性：事务操作成功后，数据库所处的状态和它的业务规则是一致的。即数据不会被破坏。如A</p>\n<p>转账100元给B，不管操作是否成功，A和B的账户总额是不变的。</p>\n<p>隔离性：在并发数据操作时，不同的事务拥有各自的数据空间，它们的操作不会对彼此产生干扰</p>\n<p>持久性：一旦事务提交成功，事务中的所有操作都必须持久化到数据库中。</p>\n<h2 id=\"5、索引问题\"><a href=\"#5、索引问题\" class=\"headerlink\" title=\"5、索引问题\"></a><strong>5</strong>、索引问题</h2><p>索引是对数据库表中一个或多个列的值进行排序的结构，建立索引有助于快速获取信息。</p>\n<p>你也可以这样理解：索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，</p>\n<p>索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅</p>\n<p>速地找到表中的数据，而不必扫描整个数据库。</p>\n<p>mysql 有4种不同的索引：</p>\n<ol>\n<li>主键索引（PRIMARY）</li>\n<li>数据列不允许重复，不允许为NULL，一个表只能有一个主键。</li>\n<li>唯一索引（UNIQUE）</li>\n<li>数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。</li>\n<li>可以通过 ALTER TABLE table_name ADD UNIQUE (column); 创建唯一索引</li>\n<li>可以通过 ALTER TABLE table_name ADD UNIQUE (column1,column2); 创建唯一组合索</li>\n<li>引</li>\n<li>普通索引（INDEX）</li>\n<li>可以通过 ALTER TABLE table_name ADD INDEX index_name (column); 创建普通索引</li>\n<li>可以通过 ALTER TABLE table_name ADD INDEX index_name(column1, column2,</li>\n<li>column3); 创建组合索引</li>\n<li>全文索引（FULLTEXT）</li>\n<li>可以通过 ALTER TABLE table_name ADD FULLTEXT (column); 创建全文索引</li>\n</ol>\n<p><strong>索引并非是越多越好，创建索引也需要耗费资源，一是增加了数据库的存储空间，二是在插入和删除时</strong></p>\n<p><strong>要花费较多的时间维护索引</strong></p>\n<ol>\n<li>索引加快数据库的检索速度</li>\n<li>索引降低了插入、删除、修改等维护任务的速度</li>\n<li>唯一索引可以确保每一行数据的唯一性</li>\n<li>通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能</li>\n<li>索引需要占物理和数据空间</li>\n</ol>\n<h2 id=\"6、SQL优化\"><a href=\"#6、SQL优化\" class=\"headerlink\" title=\"6、SQL优化\"></a>6、SQL优化</h2><p>1、查询语句中不要使用select *</p>\n<p>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代</p>\n<p>3、减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代</p>\n<p>4、or 的查询尽量用 union或者union all 代替(在确认没有重复数据或者不用剔除重复数据时，union</p>\n<p>all会更好)</p>\n<p>5、应尽量避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫</p>\n<p>描，如： select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null</p>\n<p>值，然后这样查询： select id from t where num&#x3D;0</p>\n<h2 id=\"7、简单说一说drop、delete与truncate-的区别\"><a href=\"#7、简单说一说drop、delete与truncate-的区别\" class=\"headerlink\" title=\"7、简单说一说drop、delete与truncate****的区别\"></a><strong>7<strong><strong>、简单说一说</strong></strong>drop<strong><strong>、</strong></strong>delete<strong><strong>与</strong></strong>truncate****的区别</strong></h2><p>SQL中的drop、delete、truncate都表示删除，但是三者有一些差别</p>\n<p>delete和truncate只删除表的数据不删除表的结构</p>\n<p>速度,一般来说: drop&gt; truncate &gt;delete</p>\n<p>delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;</p>\n<p>如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollback</p>\n<p>segment中,不能回滚. 操作不触发trigger.</p>\n<h2 id=\"8-、什么是视图\"><a href=\"#8-、什么是视图\" class=\"headerlink\" title=\"8****、什么是视图\"></a><strong>8****、什么是视图</strong></h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一</p>\n<p>个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表</p>\n<p>查询。</p>\n<h2 id=\"9-、-什么是内联接、左外联接、右外联接？\"><a href=\"#9-、-什么是内联接、左外联接、右外联接？\" class=\"headerlink\" title=\"9****、 什么是内联接、左外联接、右外联接？\"></a><strong>9****、 什么是内联接、左外联接、右外联接？</strong></h2><ol>\n<li>内联接（Inner Join）：匹配2张表中相关联的记录。</li>\n<li>左外联接（Left Outer Join）：除了匹配2张表中相关联的记录外，还会匹配左表中剩余的记录，</li>\n<li>右表中未匹配到的字段用NULL表示。</li>\n<li>右外联接（Right Outer Join）：除了匹配2张表中相关联的记录外，还会匹配右表中剩余的记录，</li>\n<li>左表中未匹配到的字段用NULL表示。在判定左表和右表时，要根据表名出现在Outer Join的左右</li>\n<li>位置关系。</li>\n</ol>\n<h2 id=\"10-、并发事务带来哪些问题-隔离级别\"><a href=\"#10-、并发事务带来哪些问题-隔离级别\" class=\"headerlink\" title=\"10**、并发事务带来哪些问题?**隔离级别\"></a><strong>10**<strong>、并发事务带来哪些问题</strong></strong>?**<strong>隔离级别</strong></h2><p><strong>脏读</strong></p>\n<p><strong>不可重复读</strong></p>\n<p><strong>幻影读</strong></p>\n<p>READ-UNCOMMITTED</p>\n<p>√</p>\n<p>√</p>\n<p>√</p>\n<p>READ-COMMITTED</p>\n<p>×</p>\n<p>√</p>\n<p>√</p>\n<p>REPEATABLE-READ</p>\n<p>×</p>\n<p>×</p>\n<p>√</p>\n<p>SERIALIZABLE</p>\n<p>×</p>\n<p>×</p>\n<p>×</p>\n<p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一</p>\n<p>数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>\n<p><strong>脏读（<strong><strong>Dirty read</strong></strong>）**</strong>:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到</p>\n<p>数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提</p>\n<p>交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确</p>\n<p>的。</p>\n<p><strong>丢失修改（<strong><strong>Lost to modify</strong></strong>）**</strong>:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那</p>\n<p>么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结</p>\n<p>果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事</p>\n<p>务1修改A&#x3D;A-1，事务2也修改A&#x3D;A-1，最终结果A&#x3D;19，事务1的修改被丢失。</p>\n<p><strong>不可重复读（<strong><strong>Unrepeatableread</strong></strong>）**</strong>:** 指在一个事务内多次读同一数据。在这个事务还没有结束</p>\n<p>时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改</p>\n<p>导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样</p>\n<p>的情况，因此称为不可重复读。</p>\n<p><strong>幻读（<strong><strong>Phantom read</strong></strong>）**</strong>:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接</p>\n<p>着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了</p>\n<p>一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n<p><strong>不可重复读和幻读区别：</strong></p>\n<p>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者</p>\n<p>删除比如多次读取一条记录发现记录增多或减少了。</p>\n<h2 id=\"11-、事务隔离级别有哪些-MySQL的默认隔离级别是\"><a href=\"#11-、事务隔离级别有哪些-MySQL的默认隔离级别是\" class=\"headerlink\" title=\"11**、事务隔离级别有哪些?MySQL的默认隔离级别是?**\"></a><strong>11**<strong>、事务隔离级别有哪些</strong></strong>?MySQL<strong><strong>的默认隔离级别是</strong></strong>?**</h2><p><strong>SQL</strong> <strong>标准定义了四个隔离级别：</strong></p>\n<p><strong>READ-UNCOMMITTED(<strong><strong>读取未提交</strong></strong>)*<em><strong>：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，</em>*可能会</strong></p>\n<p><strong>导致脏读、幻读或不可重复读</strong>。</p>\n<p><strong>READ-COMMITTED(<strong><strong>读取已提交</strong></strong>)*<em><strong>：</strong> 允许读取并发事务已经提交的数据，</em>*可以阻止脏读，但是幻</strong></p>\n<p><strong>读或不可重复读仍有可能发生</strong>。</p>\n<p>**REPEATABLE-READ(<strong><strong>可重复读</strong></strong>)**<strong>：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务</p>\n<p>自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</p>\n<p>**SERIALIZABLE(<strong><strong>可串行化</strong></strong>)**<strong>：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执</p>\n<p>行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻</strong></p>\n<p><strong>读</strong>。</p>\n<p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ****（可重读）</strong>。我们可以通过</p>\n<p>SELECT @@tx_isolation; 命令来查看这里需要注意的是：与 SQL 标准不同的地方在于 InnoDB 存储引擎在 <strong>REPEATABLE-READ****（可重读）</strong></p>\n<p>事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如</p>\n<p>SQL Server) 是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ****（可重</strong></p>\n<p><strong>读）</strong> 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 <strong>SERIALIZABLE(<strong><strong>可串行化</strong></strong>)</strong> 隔离级</p>\n<p>别。因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 <strong>READ\u0002</strong></p>\n<p><strong>COMMITTED(<strong><strong>读取提交内容</strong></strong>)</strong> ，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEAaTABLE\u0002</strong></p>\n<p><strong>READ****（可重读）</strong> 并不会有任何性能损失。</p>\n<p>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到 <strong>SERIALIZABLE(<strong><strong>可串行化</strong></strong>)</strong> 隔离级别。</p>\n<h2 id=\"12-、大表如何优化？\"><a href=\"#12-、大表如何优化？\" class=\"headerlink\" title=\"12****、大表如何优化？\"></a><strong>12****、大表如何优化？</strong></h2><p>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：</p>\n<p><strong>1.</strong> <strong>限定数据的范围</strong></p>\n<p>务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以</p>\n<p>控制在一个月的范围内；</p>\n<p><strong>2.</strong> <strong>读</strong>**&#x2F;**<strong>写分离</strong></p>\n<p>经典的数据库拆分方案，主库负责写，从库负责读；</p>\n<p><strong>3.</strong> <strong>垂直分区</strong></p>\n<p><strong>根据数据库里面数据表的相关性进行拆分。</strong> 例如，用户表中既有用户的登录信息又有用户的基本信息，</p>\n<p>可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。</p>\n<p><strong>简单来说垂直拆分是指数据表列的拆分，把一张列比较多的表拆分为多张表。</strong> 如下图所示，这样来说大</p>\n<p>家应该就更容易理解了。</p>\n<p><strong>垂直拆分的优点：</strong> 可以使得列数据变小，在查询时减少读取的Block数，减少I&#x2F;O次数。此外，垂</p>\n<p>直分区可以简化表的结构，易于维护。</p>\n<p><strong>垂直拆分的缺点：</strong> 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行</p>\n<p>Join来解决。此外，垂直分区会让事务变得更加复杂；</p>\n<p><strong>4.</strong> <strong>水平分区</strong></p>\n<p>mysql&gt; SELECT @@tx_isolation;</p>\n<p>+—————–+</p>\n<p>| @@tx_isolation |</p>\n<p>+—————–+</p>\n<p>| REPEATABLE-READ |</p>\n<p>+—————–+<strong>保持数据表结构不变，通过某种策略存储数据分片。这样每一片数据分散到不同的表或者库中，达到了</strong></p>\n<p><strong>分布式的目的。 水平拆分可以支撑非常大的数据量。</strong></p>\n<p>水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成</p>\n<p>多张表来存放。举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据</p>\n<p>量过大对性能造成影响。</p>\n<p>水平拆分可以支持非常大的数据量。需要注意的一点是：分表仅仅是解决了单一表数据过大的问题，但</p>\n<p>由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以 <strong>水平拆分最好</strong></p>\n<p><strong>分库</strong> 。</p>\n<p>水平拆分能够 <strong>支持非常大的数据量存储，应用端改造也少</strong>，但 <strong>分片事务难以解决</strong> ，跨节点Join性能较</p>\n<p>差，逻辑复杂。《Java工程师修炼之道》的作者推荐 <strong>尽量不要对数据进行分片，因为拆分会带来逻辑、</strong></p>\n<p><strong>部署、运维的各种复杂度</strong> ，一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题</p>\n<p>的。如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络I&#x2F;O。</p>\n<p><strong>下面补充一下数据库分片的两种常见方案：</strong></p>\n<p><strong>客户端代理： 分片逻辑在应用端，封装在<strong><strong>jar</strong></strong>包中，通过修改或者封装<strong><strong>JDBC</strong></strong>层来实现。</strong> 当当网的</p>\n<p><strong>Sharding-JDBC</strong> 、阿里的TDDL是两种比较常用的实现。</p>\n<p><strong>中间件代理： 在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。</strong> 我们现在</p>\n<p>谈的 <strong>Mycat</strong> 、360的Atlas、网易的DDB等等都是这种架构的实现。</p>\n<p>详细内容可以参考： MySQL大表优化方案: <a href=\"https://segmentfault.com/a/1190000006158186\">https://segmentfault.com/a/1190000006158186</a></p>\n<h2 id=\"13-、分库分表之后-id-主键如何处理？\"><a href=\"#13-、分库分表之后-id-主键如何处理？\" class=\"headerlink\" title=\"13**、分库分表之后,id** 主键如何处理？\"></a><strong>13**<strong>、分库分表之后</strong></strong>,id** <strong>主键如何处理？</strong></h2><p>因为要是分成多个表之后，每个表都是从 1 开始累加，这样是不对的，我们需要一个全局唯一的 id 来</p>\n<p>支持。</p>\n<p>生成全局 id 有下面这几种方式：</p>\n<p><strong>UUID</strong>：不适合作为主键，因为太长了，并且无序不可读，查询效率低。比较适合用于生成唯一的</p>\n<p>名字的标示比如文件的名字。</p>\n<p><strong>数据库自增</strong> <strong>id</strong> : 两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。这种方式生成</p>\n<p>的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</p>\n<p><strong>利用</strong> <strong>redis</strong> <strong>生成</strong> <strong>id :</strong> 性能比较好，灵活方便，不依赖于数据库。但是，引入了新的组件造成系统更</p>\n<p>加复杂，可用性降低，编码更加复杂，增加了系统成本。</p>\n<p><strong>Twitter<strong><strong>的</strong></strong>snowflake****算法</strong> ：Github 地址：<a href=\"https://github.com/twitter-archive/snowflake%E3%80%82\">https://github.com/twitter-archive/snowflake。</a></p>\n<p><strong>美团的<strong><strong>Leaf</strong></strong>分布式<strong><strong>ID</strong></strong>生成系统</strong> ：Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递</p>\n<p>增、单调递增、信息安全，里面也提到了几种分布式方案的对比，但也需要依赖关系数据库、</p>\n<p>Zookeeper等中间件。感觉还不错。美团技术团队的一篇文章：<a href=\"https://tech.meituan.com/2017/\">https://tech.meituan.com/2017/</a></p>\n<p>04&#x2F;21&#x2F;mt-leaf.html 。<strong>14<strong><strong>、</strong></strong>mysql****有关权限的表都有哪几个</strong></p>\n<p>MySQL服务器通过权限表来控制用户对数据库的访问，权限表存放在mysql数据库里，由</p>\n<p>mysql_install_db脚本初始化。这些权限表分别user，db，table_priv，columns_priv和host。下面分</p>\n<p>别介绍一下这些表的结构和内容：</p>\n<p>user权限表：记录允许连接到服务器的用户帐号信息，里面的权限是全局级的。</p>\n<p>db权限表：记录各个帐号在各个数据库上的操作权限。</p>\n<p>table_priv权限表：记录数据表级的操作权限。</p>\n<p>columns_priv权限表：记录数据列级的操作权限。</p>\n<p>host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受</p>\n<p>GRANT和REVOKE语句的影响。</p>\n<h2 id=\"15、mysql-有哪些数据类型\"><a href=\"#15、mysql-有哪些数据类型\" class=\"headerlink\" title=\"15、mysql****有哪些数据类型\"></a><strong>15<strong><strong>、</strong></strong>mysql****有哪些数据类型</strong></h2><p><strong>1****、整数类型</strong> ，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，分别表示1字节、2字节、3</p>\n<p>字节、4字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据是无符号的，即非负整</p>\n<p>数。</p>\n<p>长度：整数类型可以被指定长度，例如：INT(11)表示长度为11的INT类型。长度在大多数场景是没有意</p>\n<p>义的，它不会限制值的合法范围，只会影响显示字符的个数，而且需要和UNSIGNED ZEROFILL属性配</p>\n<p>合使用才有意义。</p>\n<p>例子，假定类型设定为INT(5)，属性为UNSIGNED ZEROFILL，如果用户插入的数据为12的话，那么数</p>\n<p>据库实际存储数据为00012。</p>\n<p><strong>2****、实数类型</strong>，包括FLOAT、DOUBLE、DECIMAL。</p>\n<p>DECIMAL可以用于存储比BIGINT还大的整型，能存储精确的小数。</p>\n<p>而FLOAT和DOUBLE是有取值范围的，并支持使用标准的浮点进行近似计算。</p>\n<p>计算时FLOAT和DOUBLE相比DECIMAL效率更高一些，DECIMAL你可以理解成是用字符串进行处理。</p>\n<p><strong>3****、字符串类型</strong>，包括VARCHAR、CHAR、TEXT、BLOB</p>\n<p>VARCHAR用于存储可变长字符串，它比定长类型更节省空间。</p>\n<p>VARCHAR使用额外1或2个字节存储字符串长度。列长度小于255字节时，使用1字节表示，否则使用2</p>\n<p>字节表示。</p>\n<p>VARCHAR存储的内容超出设置的长度时，内容会被截断。</p>\n<p>CHAR是定长的，根据定义的字符串长度分配足够的空间。</p>\n<p>CHAR会根据需要使用空格进行填充方便比较。</p>\n<p>CHAR适合存储很短的字符串，或者所有值都接近同一个长度。</p>\n<p>CHAR存储的内容超出设置的长度时，内容同样会被截断。</p>\n<p><strong>使用策略：</strong></p>\n<p>对于经常变更的数据来说，CHAR比VARCHAR更好，因为CHAR不容易产生碎片。</p>\n<p>对于非常短的列，CHAR比VARCHAR在存储空间上更有效率。</p>\n<p>使用时要注意只分配需要的空间，更长的列排序时会消耗更多内存。</p>\n<p>尽量避免使用TEXT&#x2F;BLOB类型，查询时会使用临时表，导致严重的性能开销。</p>\n<p><strong>4<strong><strong>、枚举类型（</strong></strong>ENUM****）</strong>，把不重复的数据存储为一个预定义的集合。</p>\n<p>有时可以使用ENUM代替常用的字符串类型。</p>\n<p>ENUM存储非常紧凑，会把列表值压缩到一个或两个字节。</p>\n<p>ENUM在内部存储时，其实存的是整数。</p>\n<p>尽量避免使用数字作为ENUM枚举的常量，因为容易混乱。</p>\n<p>排序是按照内部存储的整数<strong>5****、日期和时间类型</strong>，尽量使用timestamp，空间效率高于datetime，</p>\n<p>用整数保存时间戳通常不方便处理。</p>\n<p>如果需要存储微妙，可以使用bigint存储。</p>\n<p>看到这里，这道真题是不是就比较容易回答了。</p>\n<h2 id=\"16-、创建索引的三种方式，删除索引\"><a href=\"#16-、创建索引的三种方式，删除索引\" class=\"headerlink\" title=\"16****、创建索引的三种方式，删除索引\"></a><strong>16****、创建索引的三种方式，删除索引</strong></h2><p>第一种方式：在执行CREATE TABLE时创建索引</p>\n<p>第二种方式：使用ALTER TABLE命令去增加索引</p>\n<p>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p>\n<p>其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分</p>\n<p>隔。</p>\n<p>索引名index_name可自己命名，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER</p>\n<p>TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p>\n<p>第三种方式：使用CREATE INDEX命令创建</p>\n<p>CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）</p>\n<p>删除索引</p>\n<p>根据索引名删除普通索引、唯一索引、全文索引： alter table 表名 drop KEY 索引名</p>\n<p>删除主键索引： alter table 表名 drop primary key （因为主键只有一个）。这里值得注意的是，</p>\n<p>如果主键自增长，那么不能直接执行此操作（自增长依赖于主键索引）：</p>\n<p>CREATE TABLE user_index2 (</p>\n<p>id INT auto_increment PRIMARY KEY,</p>\n<p>first_name VARCHAR (16),</p>\n<p>last_name VARCHAR (16),</p>\n<p>id_card VARCHAR (18),</p>\n<p>information text,</p>\n<p>KEY name (first_name, last_name),</p>\n<p>FULLTEXT KEY (information),</p>\n<p>UNIQUE KEY (id_card)</p>\n<p>);</p>\n<p>ALTER TABLE table_name ADD INDEX index_name (column_list);</p>\n<p>CREATE INDEX index_name ON table_name (column_list);</p>\n<p>alter table user_index drop KEY name;</p>\n<p>alter table user_index drop KEY id_card;</p>\n<p>alter table user_index drop KEY information;需要取消自增长再行删除：</p>\n<p>但通常不会删除主键，因为设计主键一定与业务逻辑无关。</p>\n<h2 id=\"4-索引是什么\"><a href=\"#4-索引是什么\" class=\"headerlink\" title=\"4.索引是什么\"></a>4.索引是什么</h2><p>是一种高效获取数据的数据结构，相当于目录，更快的找到数据，是一个文件，占用物理空间。</p>\n<h2 id=\"5-索引的优点和缺点\"><a href=\"#5-索引的优点和缺点\" class=\"headerlink\" title=\"5.索引的优点和缺点\"></a>5.索引的优点和缺点</h2><p>优点：<br>①提高检索的速度。<br>②索引列对数据排序，降低排序成本。<br>③mysql 8之后引入了，隐藏索引，当一个索引被隐藏就不会被优化器所使用，就可以看出来索引对数据库的影响，有利于调优。<br>缺点：<br>①索引也是一个文件，所以会占用空间。<br>②降低更新的速度，因为不光要更新数据，还要更新索引。</p>\n<h2 id=\"6-索引的类型\"><a href=\"#6-索引的类型\" class=\"headerlink\" title=\"6.索引的类型\"></a>6.索引的类型</h2><p>①普通索引： 基本索引类型，允许定义索引的字段为空值和重复值。<br>②唯一索引： 索引的值必须唯一，允许定义索引的字段为空值。<br>③主键索引： 索引的值必须唯一，不可以为空。<br>④复合索引： 多个字段加索引，遵守最左匹配规则。<br>⑤全局索引： 只有在 MyISAM 引擎上才能使用。</p>\n<h2 id=\"7-索引怎么设计-优化\"><a href=\"#7-索引怎么设计-优化\" class=\"headerlink\" title=\"7.索引怎么设计(优化)\"></a>7.索引怎么设计(优化)</h2><p>①选择唯一性索引：值是唯一的，查询的更快。<br>②经常作为查询条件的字段加索引。<br>③为经常需要排序、分组和联合操作的字段建立索引：order by、group by、union(联合)、distinct(去重)等。<br>④限制索引个数：索引数量多，需要的磁盘空间就越多，更新表时，对索引的重构和更新就很费劲。<br>⑤表数据少的不建议使用索引(百万级以内)：数据过少，有可能查询的速度，比遍历索引的速度都快。<br>⑥删除不常用和不再使用的索引。<br>⑦用类型小的类型做索引：比如：int和BIGINT能用int就使用int。因为类型小，查询速度快和索引占用的空间更少。<br>⑧使用前缀索引，要是字符串越长，那么索引占的空间越大，并且比较起来就时间就越长。</p>\n<h2 id=\"1-char和varchar的区别\"><a href=\"#1-char和varchar的区别\" class=\"headerlink\" title=\"1.char和varchar的区别\"></a>1.char和varchar的区别</h2><p>①char设置多少长度就是多少长度，varchar可以改变长度，所以char的空间利用率不如varchar的空间利用率高。<br>②因为长度固定，所以存取速度要比varchar快。<br>③char适用于固定长度的字符串，比如身份证号、手机号等，varchar适用于不固定的字符串。</p>\n","feature":true,"text":"1Mysql1****、数据库的三范式是什么第一范式：列不可再分 原子性 第二范式：行可以唯一区分，主键约束** 唯一性** 第三范式：表的非主属性不能依赖与其...","permalink":"/post/Mysql","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"-Mysql","slug":"Mysql","count":1,"path":"api/tags/Mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1Mysql\"><span class=\"toc-text\">1Mysql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1****、数据库的三范式是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7-ACID\"><span class=\"toc-text\">18.事务的四大特性(ACID)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8B-%E6%A0%91%E4%B8%8D%E7%94%A8B%E6%A0%91\"><span class=\"toc-text\">12.为什么使用B+树不用B树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">21.怎么优化数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#22-SQL%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">22.SQL优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">2****、数据库引擎有哪些</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81InnoDB%E4%B8%8EMyISAM-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">*3、InnoDB与MyISAM***的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">4**、数据库的事务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%B4%A2%E5%BC%95%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5、索引问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81SQL%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">6、SQL优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B4%E4%B8%80%E8%AF%B4drop%E3%80%81delete%E4%B8%8Etruncate-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">7、简单说一说drop、delete与truncate****的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">8****、什么是视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E3%80%81-%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E8%81%94%E6%8E%A5%E3%80%81%E5%B7%A6%E5%A4%96%E8%81%94%E6%8E%A5%E3%80%81%E5%8F%B3%E5%A4%96%E8%81%94%E6%8E%A5%EF%BC%9F\"><span class=\"toc-text\">9****、 什么是内联接、左外联接、右外联接？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E3%80%81%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">10**、并发事务带来哪些问题?**隔离级别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E3%80%81%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%9C%89%E5%93%AA%E4%BA%9B-MySQL%E7%9A%84%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%98%AF\"><span class=\"toc-text\">11**、事务隔离级别有哪些?MySQL的默认隔离级别是?**</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E3%80%81%E5%A4%A7%E8%A1%A8%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%EF%BC%9F\"><span class=\"toc-text\">12****、大表如何优化？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E3%80%81%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%B9%8B%E5%90%8E-id-%E4%B8%BB%E9%94%AE%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">13**、分库分表之后,id** 主键如何处理？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15%E3%80%81mysql-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">15、mysql****有哪些数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-%E3%80%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">16****、创建索引的三种方式，删除索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%B4%A2%E5%BC%95%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">4.索引是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">5.索引的优点和缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%B4%A2%E5%BC%95%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">6.索引的类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E7%B4%A2%E5%BC%95%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1-%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">7.索引怎么设计(优化)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-char%E5%92%8Cvarchar%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.char和varchar的区别</span></a></li></ol></li></ol>","author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"湖南农民运动考察报告","uid":"896696a1814f11093601ac3e7642fa8a","slug":"Communis","date":"2024-03-18T16:39:00.000Z","updated":"2024-03-22T06:08:41.789Z","comments":true,"path":"api/articles/Communis.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/007.jpg","text":"谁是我们的敌人，谁是我们的朋友第一次国内革命战争时期 ​ 谁是我们的敌人？谁是我们的朋友？分不清敌人与朋友，必不是个革命分子，要分清敌人与朋友呢，却并不是立场。...","permalink":"/post/Communis","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"毛选","slug":"毛选","count":1,"path":"api/categories/毛选.json"}],"tags":[{"name":"农民运动","slug":"农民运动","count":1,"path":"api/tags/农民运动.json"}],"author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}},"feature":true},"next_post":{"title":"HTML八股文","uid":"f359944492a6e4db27ed8353778446f0","slug":"前端八股文","date":"2024-03-18T09:27:43.000Z","updated":"2024-03-22T11:46:03.124Z","comments":true,"path":"api/articles/前端八股文.json","keywords":null,"cover":"https://raw.githubusercontent.com/3309446352/Images/main/img/屏幕截图(1).png","text":"1、HTML 1.你对 HTML 语义化的理解？★★★★★ html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS ...","permalink":"/post/前端八股文","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"},{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"},{"name":"Tag","slug":"Tag","count":1,"path":"api/tags/Tag.json"},{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"},{"name":"Node.js","slug":"Node-js","count":1,"path":"api/tags/Node-js.json"},{"name":"Webpack","slug":"Webpack","count":1,"path":"api/tags/Webpack.json"},{"name":"Babel","slug":"Babel","count":1,"path":"api/tags/Babel.json"},{"name":"TypeScript","slug":"TypeScript","count":1,"path":"api/tags/TypeScript.json"},{"name":"Vuex","slug":"Vuex","count":1,"path":"api/tags/Vuex.json"}],"author":{"name":"云深不知处","slug":"blog-author","avatar":"/svg/logo.jpg","link":"page/about","description":"<h1 style=\"color:aqua;font-weight:bolder;\">幽灵，一个共产主义的幽灵，在欧洲徘徊着.为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力,都联合起来了。</h1>","socials":{"github":"https://github.com/3309446352","twitter":"https://twitter.com/xinggu98","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_52246780?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/center/signin?avatar_menu","customs":{"bilibili":{"icon":"/svg/blibli.svg","link":"https://space.bilibili.com/272466600"},"Discord":{"icon":"/svg/discord.svg","link":"https://raw.githubusercontent.com/3309446352/Images/main/img/preview.jpg"}}}},"feature":true}}